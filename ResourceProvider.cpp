#include <map>
#include "ResourceProvider.h"

std::map<wstring, pair<wstring, wstring>> rs_name_value_comment_map = {
	{L"AppName", make_pair<wstring, wstring>(L"Calculator", L"{@Appx_ShortDisplayName@}{StringCategory='Feature Title'} This is the title of the official application when published through Windows Store.")},
	{L"DevAppName", make_pair<wstring, wstring>(L"Calculator [Dev]", L"{@Appx_ShortDisplayName@}{StringCategory='Feature Title'} This is the name of the application when built by a user via GitHub. We use a different name to make it easier for users to distinguish the apps when both this version and the Store version are installed on the same device.")},
	{L"AppStoreName", make_pair<wstring, wstring>(L"Windows Calculator", L"{@Appx_DisplayName@}{StringCategory='Feature Title'} Name that shows up in the app store. It contains 'Windows' to distinguish it from 3rd party calculator apps.")},
	{L"DevAppStoreName", make_pair<wstring, wstring>(L"Windows Calculator [Dev]", L"{@Appx_DisplayName@}{StringCategory='Feature Title'} Name that shows up in the app store. It contains 'Windows' to distinguish it from 3rd party calculator apps. This is the the version of the name used when the app is built by a user via GitHub.")},
	{L"AppDescription", make_pair<wstring, wstring>(L"Calculator", L"{@Appx_Description@} This description is used for the official application when published through Windows Store.")},
	{L"DevAppDescription", make_pair<wstring, wstring>(L"Calculator [Dev]", L"{@Appx_Description@} This is the description of the application when built by a user via GitHub. We use a different description to make it easier for users to distinguish the apps when both this version and the Store version are installed on the same device.")},
	{L"AppUpdateResource", make_pair<wstring, wstring>(L"AppUpdate2", L"{Locked}This will Update Resources.pri File, Resource is not used in the app")},
	{L"decimalButton.Tag", make_pair<wstring, wstring>(L"DEC", L"{Locked}The Decimal button")},
	{L"binaryButton.Tag", make_pair<wstring, wstring>(L"BIN", L"{Locked}The Binary button")},
	{L"hexButton.Tag", make_pair<wstring, wstring>(L"HEX", L"{Locked}The Hex button")},
	{L"octButton.Tag", make_pair<wstring, wstring>(L"OCT", L"{Locked}The Oct button")},
	{L"copyMenuItem", make_pair<wstring, wstring>(L"Copy", L"Copy context menu string")},
	{L"pasteMenuItem", make_pair<wstring, wstring>(L"Paste", L"Paste context menu string")},
	{L"SupplementaryResultsHeader.Text", make_pair<wstring, wstring>(L"About equal to", L"The text that shows at the bottom of the converter to head the supplementary results. Indicates that the main result is approximately equal to the supplementary results.")},
	{L"ClearHistory.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"D", L"{Locked}The shortcut for the clearing history contents Ctrl+Shift+D.")},
	{L"HistoryButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"H", L"{Locked}This is the shortcut for hiding history Ctrl+H.")},
	{L"memButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"M", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"clearButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Escape", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"clearEntryButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Delete", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"closeParenthesisButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L")", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"cosButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"O", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"coshButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"O", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"expButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"X", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"dmsButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"M", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"decimalSeparatorButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Decimal", L"{Locked}This is the Virtual Kez that should trigger this button. It comes from the Windows::System::VirtualKey enum.")},
	{L"divideButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"/", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"equalButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"=", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"equalButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Enter", L"{Locked}This is the value from the VirtualKey enum that maps to this button")},
	{L"factorialButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"!", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"ftoeButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"V", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"invertButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"R", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"logBase10Button.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"L", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"logBaseEButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"N", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"minusButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"-", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"modButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"%", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"negateButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F9", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"converterNegateButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F9", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"converterNegateButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"-", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num0Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"0", L"{Locked}This is the character for the corresponding button.")},
	{L"num1Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"1", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num2Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"2", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num3Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"3", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num4Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"4", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num5Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"5", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num6Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"6", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num7Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"7", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num8Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"8", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"num9Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"9", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"aButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"A", L"{Locked}This is the character for the corresponding button.")},
	{L"bButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"B", L"{Locked}This is the character for the corresponding button.")},
	{L"cButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"C", L"{Locked}This is the character for the corresponding button.")},
	{L"dButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"D", L"{Locked}This is the character for the corresponding button.")},
	{L"eButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"E", L"{Locked}This is the character for the corresponding button.")},
	{L"fButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F", L"{Locked}This is the character for the corresponding button.")},
	{L"aButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"A", L"{Locked}This is the character for the corresponding button.")},
	{L"bButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"B", L"{Locked}This is the character for the corresponding button.")},
	{L"cButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"C", L"{Locked}This is the character for the corresponding button.")},
	{L"dButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"D", L"{Locked}This is the character for the corresponding button.")},
	{L"eButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"E", L"{Locked}This is the character for the corresponding button.")},
	{L"fButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"F", L"{Locked}This is the character for the corresponding button.")},
	{L"openParenthesisButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"(", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"percentButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"%", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"piButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"P", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"plusButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"+", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"powerButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Y", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"powerButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"^", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"powerOf10Button.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"G", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum. This one is in combination with the Control key.")},
	{L"sinButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"S", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"sinhButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"S", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"squareRootButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"@", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"tanButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"T", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"tanhButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"T", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"xpower2Button.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Q", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"xpower3Button.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"#", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"ySquareRootButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"Y", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum. This one is in combination with the Control key.")},
	{L"backSpaceButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Back", L"{Locked}When this character is received by KeyboardShortcutManager, it will cause this button to execute. This value is not localized.")},
	{L"multiplyButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"*", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"orButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"|", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"notButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"~", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"andButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"&", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"lshButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"<", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"rshButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L">", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"xorButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"^", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"rolButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"<", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"rorButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L">", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"decimalButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F6", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"hexButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F5", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"octButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F7", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"binaryButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F8", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"degreeButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"D", L"{Locked}The shortcut for the Deg button")},
	{L"invcosButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"O", L"{Locked}The shortcut for the inverted cos button")},
	{L"invcoshButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"O", L"{Locked}The shortcut for the inverted cosh button")},
	{L"invsinButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"S", L"{Locked}This is the shortcut for the inverted sin button")},
	{L"invsinhButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"S", L"{Locked}This is the shortcut for the inverted sinh button")},
	{L"invtanButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"T", L"{Locked}This is the shortcut for the inverted tan button. ")},
	{L"invtanhButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"T", L"{Locked}This is the shortcut for the inverted tanh button")},
	{L"powerOfEButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"N", L"{Locked}This is the shortcut for the power x  button.")},
	{L"copyButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"C", L"{Locked}This is the shortcut for copy, usuall CTRL+C")},
	{L"copyButtonAlternate.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"Insert", L"{Locked}This is the alternate shortcut for copy, CTRL+Insert")},
	{L"pasteButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"V", L"{Locked}This is the shortcut for paste, usually CTRL+V")},
	{L"pasteButtonAlternate.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"Insert", L"{Locked}This is the alternate shortcut for paste, SHIFT+Insert")},
	{L"BitFlipItemAutomationName", make_pair<wstring, wstring>(L"%1, value %2", L"{Locked='%1','%2'}. String used in automation name for each bit in bit flip. %1 will be replaced by the position of the bit (1st bit, 3rd bit), %2 by a binary value (1 or 0)")},
	{L"BitPosition", make_pair<wstring, wstring>(L"%1 bit", L"{Locked='%1'}. Sub-string used to indicate the position of a bit (e.g. 1st bit, 2nd bit...)")},
	{L"63", make_pair<wstring, wstring>(L"63rd", L"Sub-string used in automation name for 63 bit in bit flip")},
	{L"62", make_pair<wstring, wstring>(L"62nd", L"Sub-string used in automation name for 62 bit in bit flip")},
	{L"61", make_pair<wstring, wstring>(L"61st", L"Sub-string used in automation name for 61 bit in bit flip")},
	{L"60", make_pair<wstring, wstring>(L"60th", L"Sub-string used in automation name for 60 bit in bit flip")},
	{L"59", make_pair<wstring, wstring>(L"59th", L"Sub-string used in automation name for 59 bit in bit flip")},
	{L"58", make_pair<wstring, wstring>(L"58th", L"Sub-string used in automation name for 58 bit in bit flip")},
	{L"57", make_pair<wstring, wstring>(L"57th", L"Sub-string used in automation name for 57 bit in bit flip")},
	{L"56", make_pair<wstring, wstring>(L"56th", L"Sub-string used in automation name for 56 bit in bit flip")},
	{L"55", make_pair<wstring, wstring>(L"55th", L"Sub-string used in automation name for 55 bit in bit flip")},
	{L"54", make_pair<wstring, wstring>(L"54th", L"Sub-string used in automation name for 54 bit in bit flip")},
	{L"53", make_pair<wstring, wstring>(L"53rd", L"Sub-string used in automation name for 53 bit in bit flip")},
	{L"52", make_pair<wstring, wstring>(L"52nd", L"Sub-string used in automation name for 52 bit in bit flip")},
	{L"51", make_pair<wstring, wstring>(L"51st", L"Sub-string used in automation name for 51 bit in bit flip")},
	{L"50", make_pair<wstring, wstring>(L"50th", L"Sub-string used in automation name for 50 bit in bit flip")},
	{L"49", make_pair<wstring, wstring>(L"49th", L"Sub-string used in automation name for 49 bit in bit flip")},
	{L"48", make_pair<wstring, wstring>(L"48th", L"Sub-string used in automation name for 48 bit in bit flip")},
	{L"47", make_pair<wstring, wstring>(L"47th", L"Sub-string used in automation name for 47 bit in bit flip")},
	{L"46", make_pair<wstring, wstring>(L"46th", L"Sub-string used in automation name for 46 bit in bit flip")},
	{L"45", make_pair<wstring, wstring>(L"45th", L"Sub-string used in automation name for 45 bit in bit flip")},
	{L"44", make_pair<wstring, wstring>(L"44th", L"Sub-string used in automation name for 44 bit in bit flip")},
	{L"43", make_pair<wstring, wstring>(L"43rd", L"Sub-string used in automation name for 43 bit in bit flip")},
	{L"42", make_pair<wstring, wstring>(L"42nd", L"Sub-string used in automation name for 42 bit in bit flip")},
	{L"41", make_pair<wstring, wstring>(L"41st", L"Sub-string used in automation name for 41 bit in bit flip")},
	{L"40", make_pair<wstring, wstring>(L"40th", L"Sub-string used in automation name for 40 bit in bit flip")},
	{L"39", make_pair<wstring, wstring>(L"39th", L"Sub-string used in automation name for 39 bit in bit flip")},
	{L"38", make_pair<wstring, wstring>(L"38th", L"Sub-string used in automation name for 38 bit in bit flip")},
	{L"37", make_pair<wstring, wstring>(L"37th", L"Sub-string used in automation name for 37 bit in bit flip")},
	{L"36", make_pair<wstring, wstring>(L"36th", L"Sub-string used in automation name for 36 bit in bit flip")},
	{L"35", make_pair<wstring, wstring>(L"35th", L"Sub-string used in automation name for 35 bit in bit flip")},
	{L"34", make_pair<wstring, wstring>(L"34th", L"Sub-string used in automation name for 34 bit in bit flip")},
	{L"33", make_pair<wstring, wstring>(L"33rd", L"Sub-string used in automation name for 33 bit in bit flip")},
	{L"32", make_pair<wstring, wstring>(L"32nd", L"Sub-string used in automation name for 32 bit in bit flip")},
	{L"31", make_pair<wstring, wstring>(L"31st", L"Sub-string used in automation name for 31 bit in bit flip")},
	{L"30", make_pair<wstring, wstring>(L"30th", L"Sub-string used in automation name for 30 bit in bit flip")},
	{L"29", make_pair<wstring, wstring>(L"29th", L"Sub-string used in automation name for 29 bit in bit flip")},
	{L"28", make_pair<wstring, wstring>(L"28th", L"Sub-string used in automation name for 28 bit in bit flip")},
	{L"27", make_pair<wstring, wstring>(L"27th", L"Sub-string used in automation name for 27 bit in bit flip")},
	{L"26", make_pair<wstring, wstring>(L"26th", L"Sub-string used in automation name for 26 bit in bit flip")},
	{L"25", make_pair<wstring, wstring>(L"25th", L"Sub-string used in automation name for 25 bit in bit flip")},
	{L"24", make_pair<wstring, wstring>(L"24th", L"Sub-string used in automation name for 24 bit in bit flip")},
	{L"23", make_pair<wstring, wstring>(L"23rd", L"Sub-string used in automation name for 23 bit in bit flip")},
	{L"22", make_pair<wstring, wstring>(L"22nd", L"Sub-string used in automation name for 22 bit in bit flip")},
	{L"21", make_pair<wstring, wstring>(L"21st", L"Sub-string used in automation name for 21 bit in bit flip")},
	{L"20", make_pair<wstring, wstring>(L"20th", L"Sub-string used in automation name for 20 bit in bit flip")},
	{L"19", make_pair<wstring, wstring>(L"19th", L"Sub-string used in automation name for 19 bit in bit flip")},
	{L"18", make_pair<wstring, wstring>(L"18th", L"Sub-string used in automation name for 18 bit in bit flip")},
	{L"17", make_pair<wstring, wstring>(L"17th", L"Sub-string used in automation name for 17 bit in bit flip")},
	{L"16", make_pair<wstring, wstring>(L"16th", L"Sub-string used in automation name for 16 bit in bit flip")},
	{L"15", make_pair<wstring, wstring>(L"15th", L"Sub-string used in automation name for 15 bit in bit flip")},
	{L"14", make_pair<wstring, wstring>(L"14th", L"Sub-string used in automation name for 14 bit in bit flip")},
	{L"13", make_pair<wstring, wstring>(L"13th", L"Sub-string used in automation name for 13 bit in bit flip")},
	{L"12", make_pair<wstring, wstring>(L"12th", L"Sub-string used in automation name for 12 bit in bit flip")},
	{L"11", make_pair<wstring, wstring>(L"11th", L"Sub-string used in automation name for 11 bit in bit flip")},
	{L"10", make_pair<wstring, wstring>(L"10th", L"Sub-string used in automation name for 10 bit in bit flip")},
	{L"9", make_pair<wstring, wstring>(L"9th", L"Sub-string used in automation name for 9 bit in bit flip")},
	{L"8", make_pair<wstring, wstring>(L"8th", L"Sub-string used in automation name for 8 bit in bit flip")},
	{L"7", make_pair<wstring, wstring>(L"7th", L"Sub-string used in automation name for 7 bit in bit flip")},
	{L"6", make_pair<wstring, wstring>(L"6th", L"Sub-string used in automation name for 6 bit in bit flip")},
	{L"5", make_pair<wstring, wstring>(L"5th", L"Sub-string used in automation name for 5 bit in bit flip")},
	{L"4", make_pair<wstring, wstring>(L"4th", L"Sub-string used in automation name for 4 bit in bit flip")},
	{L"3", make_pair<wstring, wstring>(L"3rd", L"Sub-string used in automation name for 3 bit in bit flip")},
	{L"2", make_pair<wstring, wstring>(L"2nd", L"Sub-string used in automation name for 2 bit in bit flip")},
	{L"1", make_pair<wstring, wstring>(L"1st", L"Sub-string used in automation name for 1 bit in bit flip")},
	{L"LeastSignificantBit", make_pair<wstring, wstring>(L"least significant bit", L"Used to describe the first bit of a binary number. Used in bit flip")},
	{L"MemoryButton_Open", make_pair<wstring, wstring>(L"Open memory flyout", L"This is the automation name and label for the memory button when the memory flyout is closed.")},
	{L"MemoryButton_Close", make_pair<wstring, wstring>(L"Close memory flyout", L"This is the automation name and label for the memory button when the memory flyout is open.")},
	{L"AlwaysOnTop_Enter", make_pair<wstring, wstring>(L"Keep on top", L"This is the tool tip automation name for the always-on-top button when out of always-on-top mode.")},
	{L"AlwaysOnTop_Exit", make_pair<wstring, wstring>(L"Back to full view", L"This is the tool tip automation name for the always-on-top button when in always-on-top mode.")},
	{L"MemoryButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Memory", L"This is the tool tip automation name for the memory button.")},
	{L"HistoryButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"History (Ctrl+H)", L"This is the tool tip automation name for the history button.")},
	{L"bitFlip.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Bit toggling keypad", L"This is the tool tip automation name for the bitFlip button.")},
	{L"fullKeypad.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Full keypad", L"This is the tool tip automation name for the numberPad button.")},
	{L"ClearMemoryButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"L", L"{Locked}This is the value that comes from the VirtualKey enum that represents the keyboard shortcut combo (ctrl + L) for the clear memory button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"ClearMemoryButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Clear all memory (Ctrl+L)", L"This is the tool tip automation name for the Clear Memory (MC) button.")},
	{L"MemRecall.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"R", L"{Locked}This is the value that comes from the VirtualKey enum that represents the keyboard shortcut combo (ctrl + R) for the memory recall function. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"MemPlus.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"P", L"{Locked}This is the value that comes from the VirtualKey enum that represents the keyboard shortcut combo (ctrl + P) for the memory plus function. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"MemMinus.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"Q", L"{Locked}This is the value that comes from the VirtualKey enum that represents the keyboard shortcut combo (ctrl + Q) for the memory minus function. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"MemoryLabel.Text", make_pair<wstring, wstring>(L"Memory", L"The text that shows as the header for the memory list")},
	{L"MemoryPivotItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory", L"The automation name for the Memory pivot item that is shown when Calculator is in wide layout.")},
	{L"HistoryLabel.Text", make_pair<wstring, wstring>(L"History", L"The text that shows as the header for the history list")},
	{L"HistoryPivotItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"History", L"The automation name for the History pivot item that is shown when Calculator is in wide layout.")},
	{L"LeftChevron.Text", make_pair<wstring, wstring>(L"<<", L"{Locked}The chevron that shows to indicate that the expression history has overflowed the available space and is therefore trimmed.")},
	{L"converterModeButton.Content", make_pair<wstring, wstring>(L"Converter", L"Label for a control that activates the unit converter mode.")},
	{L"scientificModeButton.Content", make_pair<wstring, wstring>(L"Scientific", L"Label for a control that activates scientific mode calculator layout")},
	{L"standardModeButton.Content", make_pair<wstring, wstring>(L"Standard", L"Label for a control that activates standard mode calculator layout.")},
	{L"converterModeButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Converter Mode", L"Screen reader prompt for a control that activates the unit converter mode.")},
	{L"scientificModeButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scientific Mode", L"Screen reader prompt for a control that activates scientific mode calculator layout")},
	{L"standardModeButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Standard Mode", L"Screen reader prompt for a control that activates standard mode calculator layout.")},
	{L"ClearHistory.Name", make_pair<wstring, wstring>(L"Clear all history", L"'ClearHistory' used on the calculator history pane that stores the calculation history.")},
	{L"ClearHistory.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Clear all history", L"This is the tool tip automation name for the Clear History button.")},
	{L"HideHistory.Name", make_pair<wstring, wstring>(L"Hide", L"'HideHistory' used on the calculator history pane that stores the calculation history.")},
	{L"StandardModeText", make_pair<wstring, wstring>(L"Standard", L"The text that shows in the dropdown navigation control in snapped mode when standard calculator mode is selected.")},
	{L"ScientificModeText", make_pair<wstring, wstring>(L"Scientific", L"The text that shows in the dropdown navigation control in snapped mode when scientific calculator mode is selected.")},
	{L"ProgrammerModeText", make_pair<wstring, wstring>(L"Programmer", L"The text that shows in the dropdown navigation control in snapped mode when programmer calculator mode is selected.")},
	{L"ConverterModeText", make_pair<wstring, wstring>(L"Converter", L"The text that shows in the dropdown navigation control for the converter group. The previous key for this was 'ConverterMode.Text'.")},
	{L"CalculatorModeText", make_pair<wstring, wstring>(L"Calculator", L"The text that shows in the dropdown navigation control for the calculator group.")},
	{L"ConverterModeTextCaps", make_pair<wstring, wstring>(L"Converter", L"The text that shows in the dropdown navigation control for the converter group in upper case. The previous key for this was 'ConverterMode.Text'.")},
	{L"CalculatorModeTextCaps", make_pair<wstring, wstring>(L"Calculator", L"The text that shows in the dropdown navigation control for the calculator group in upper case.")},
	{L"ConverterModePluralText", make_pair<wstring, wstring>(L"Converters", L"Pluralized version of the converter group text, used for the screen reader prompt.")},
	{L"CalculatorModePluralText", make_pair<wstring, wstring>(L"Calculators", L"Pluralized version of the calculator group text, used for the screen reader prompt.")},
	{L"Format_CalculatorResults", make_pair<wstring, wstring>(L"Display is %1", L"{Locked='%1'}. Screen reader prompt for the Calculator results text block. %1 = Localized display value, e.g. '50'.")},
	{L"Format_CalculatorAlwaysOnTopResults", make_pair<wstring, wstring>(L"Expression is %1, Current input is %2", L"{Locked='%1','%2'}. Screen reader prompt for the Calculator always-on-top expression. %1 = Expression, e.g. '50 + 2 - 60 +', %2 = Localized display value, e.g. '50'.")},
	{L"Format_CalculatorResults_Decimal", make_pair<wstring, wstring>(L"Display is %1 point", L"{Locked='%1'}. Automation label for the calculator display in the specific case where the user has just pressed the decimal separator button. For example, the user wants to input '7.5'.  When they have input '7.' they will hear 'Display is 7 point'. 'point' should be localized to the locale's appropriate decimal separator.")},
	{L"Format_CalculatorExpression", make_pair<wstring, wstring>(L"Expression is %1", L"{Locked='%1'}. Screen reader prompt for the Calculator expression results. %1 = Localized display value, e.g. '50 + 2 - 60 +'.")},
	{L"Display_Copied", make_pair<wstring, wstring>(L"Display value copied to clipboard", L"Screen reader prompt for the Calculator display copy button, when the button is invoked.")},
	{L"HistoryPane", make_pair<wstring, wstring>(L"History", L"Screen reader prompt for the history flyout")},
	{L"MemoryPane", make_pair<wstring, wstring>(L"Memory", L"Screen reader prompt for the memory flyout")},
	{L"Format_HexButtonValue", make_pair<wstring, wstring>(L"HexaDecimal %1", L"{Locked='%1'}. Screen reader prompt for the hexadecimal value in Programmer mode. %1 = the localized hexadecimal value, e.g. '21B4 8F73'.")},
	{L"Format_DecButtonValue", make_pair<wstring, wstring>(L"Decimal %1", L"{Locked='%1'}. Screen reader prompt for the decimal value in Programmer mode. %1 = the localized decimal value, e.g. '5,732'.")},
	{L"Format_OctButtonValue", make_pair<wstring, wstring>(L"Octal %1", L"{Locked='%1'}. Screen reader prompt for the octal value in Programmer mode. %1 = the localized octal value, e.g. '155 174'.")},
	{L"Format_BinButtonValue", make_pair<wstring, wstring>(L"Binary %1", L"{Locked='%1'}. Screen reader prompt for the binary value in Programmer mode. %1 = the localized binary value, e.g. '0010 1011'.")},
	{L"ClearHistory.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear all history", L"Screen reader prompt for the Calculator History Clear button")},
	{L"HistoryList_Cleared", make_pair<wstring, wstring>(L"History cleared", L"Screen reader prompt for the Calculator History Clear button, when the button is invoked.")},
	{L"HideHistory.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hide History", L"Screen reader prompt for the Calculator History Hide button")},
	{L"HistoryButton_Open", make_pair<wstring, wstring>(L"Open history flyout", L"Screen reader prompt for the Calculator History button, when the flyout is closed.")},
	{L"HistoryButton_Close", make_pair<wstring, wstring>(L"Close history flyout", L"Screen reader prompt for the Calculator History button, when the flyout is open.")},
	{L"memButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory Store", L"Screen reader prompt for the Calculator Memory button")},
	{L"memButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Memory store (Ctrl+M)", L"This is the tool tip automation name for the Memory Store (MS) button.")},
	{L"ClearMemoryButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear all memory", L"Screen reader prompt for the Calculator Clear Memory button")},
	{L"Memory_Cleared", make_pair<wstring, wstring>(L"Memory cleared", L"Screen reader prompt for the Calculator Clear Memory button, when the button is invoked.")},
	{L"MemRecall.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory Recall", L"Screen reader prompt for the Calculator Memory Recall button")},
	{L"MemRecall.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Memory recall (Ctrl+R)", L"This is the tool tip automation name for the Memory Recall (MR) button.")},
	{L"MemPlus.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory Add", L"Screen reader prompt for the Calculator Memory Add button")},
	{L"MemPlus.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Memory add (Ctrl+P)", L"This is the tool tip automation name for the Memory Add (M+) button.")},
	{L"MemMinus.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory Subtract", L"Screen reader prompt for the Calculator Memory Subtract button")},
	{L"MemMinus.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Memory subtract (Ctrl+Q)", L"This is the tool tip automation name for the Memory Subtract (M-) button.")},
	{L"ClearMemoryItemButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear memory item", L"Screen reader prompt for the Calculator Clear Memory button")},
	{L"ClearMemoryItemButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Clear memory item", L"This is the tool tip automation name for the Clear Memory Item (MC) button in the Memory list.")},
	{L"MemPlusItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Add to memory item", L"Screen reader prompt for the Calculator Memory Add button in the Memory list")},
	{L"MemPlusItem.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Add to memory item", L"This is the tool tip automation name for the Calculator Memory Add button in the Memory list")},
	{L"MemMinusItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Subtract from memory item", L"Screen reader prompt for the Calculator Memory Subtract button in the Memory list")},
	{L"MemMinusItem.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Subtract from memory item", L"This is the tool tip automation name for the Calculator Memory Subtract button in the Memory list")},
	{L"ClearMemorySwipeItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear memory item", L"Screen reader prompt for the Calculator Clear Memory button")},
	{L"ClearMemoryMenuItem.Text", make_pair<wstring, wstring>(L"Clear memory item", L"Text string for the Calculator Clear Memory option in the Memory list context menu")},
	{L"MemPlusSwipeItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Add to memory item", L"Screen reader prompt for the Calculator Memory Add swipe button in the Memory list")},
	{L"MemPlusMenuItem.Text", make_pair<wstring, wstring>(L"Add to memory item", L"Text string for the Calculator Memory Add option in the Memory list context menu")},
	{L"MemMinusSwipeItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Subtract from memory item", L"Screen reader prompt for the Calculator Memory Subtract swipe button in the Memory list")},
	{L"MemMinusMenuItem.Text", make_pair<wstring, wstring>(L"Subtract from memory item", L"Text string for the Calculator Memory Subtract option in the Memory list context menu")},
	{L"DeleteHistorySwipeItem.Text", make_pair<wstring, wstring>(L"Delete", L"Text string for the Calculator Delete swipe button in the History list")},
	{L"CopyHistoryMenuItem.Text", make_pair<wstring, wstring>(L"Copy", L"Text string for the Calculator Copy option in the History list context menu")},
	{L"DeleteHistoryMenuItem.Text", make_pair<wstring, wstring>(L"Delete", L"Text string for the Calculator Delete option in the History list context menu")},
	{L"DeleteHistorySwipeItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Delete history item", L"Screen reader prompt for the Calculator Delete swipe button in the History list")},
	{L"DeleteHistoryMenuItem.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Delete history item", L"Screen reader prompt for the Calculator Delete option in the History list context menu")},
	{L"backSpaceButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Backspace", L"Screen reader prompt for the Calculator Backspace button")},
	{L"BinaryZero.Text", make_pair<wstring, wstring>(L"0", L"Screen reader prompt for the Calculator number '0' button")},
	{L"BinaryOne.Text", make_pair<wstring, wstring>(L"1", L"Screen reader prompt for the Calculator number '1' button")},
	{L"num0Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Zero", L"Screen reader prompt for the Calculator number '0' button")},
	{L"num1Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"One", L"Screen reader prompt for the Calculator number '1' button")},
	{L"num2Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Two", L"Screen reader prompt for the Calculator number '2' button")},
	{L"num3Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Three", L"Screen reader prompt for the Calculator number '3' button")},
	{L"num4Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Four", L"Screen reader prompt for the Calculator number '4' button")},
	{L"num5Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Five", L"Screen reader prompt for the Calculator number '5' button")},
	{L"num6Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Six", L"Screen reader prompt for the Calculator number '6' button")},
	{L"num7Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Seven", L"Screen reader prompt for the Calculator number '7' button")},
	{L"num8Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Eight", L"Screen reader prompt for the Calculator number '8' button")},
	{L"num9Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Nine", L"Screen reader prompt for the Calculator number '9' button")},
	{L"aButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"A", L"Screen reader prompt for the Calculator number 'A' button")},
	{L"bButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"B", L"Screen reader prompt for the Calculator number 'B' button")},
	{L"cButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"C", L"Screen reader prompt for the Calculator number 'C' button")},
	{L"dButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"D", L"Screen reader prompt for the Calculator number 'D' button")},
	{L"eButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"E", L"Screen reader prompt for the Calculator number 'E' button")},
	{L"fButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"F", L"Screen reader prompt for the Calculator number 'F' button")},
	{L"andButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"And", L"Screen reader prompt for the Calculator And button")},
	{L"orButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Or", L"Screen reader prompt for the Calculator Or button")},
	{L"notButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Not", L"Screen reader prompt for the Calculator Not button")},
	{L"rolButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Rotate on left", L"Screen reader prompt for the Calculator ROL button")},
	{L"rorButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Rotate on right", L"Screen reader prompt for the Calculator ROR button")},
	{L"lshButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Left shift", L"Screen reader prompt for the Calculator LSH button")},
	{L"rshButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Right shift", L"Screen reader prompt for the Calculator RSH button")},
	{L"xorButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Exclusive or", L"Screen reader prompt for the Calculator XOR button")},
	{L"qwordButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Quadruple Word toggle", L"Screen reader prompt for the Calculator qword button. Should read as 'Quadruple word toggle button'.")},
	{L"dwordButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Double Word toggle", L"Screen reader prompt for the Calculator dword button. Should read as 'Double word toggle button'.")},
	{L"wordButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Word toggle", L"Screen reader prompt for the Calculator word button. Should read as 'Word toggle button'.")},
	{L"byteButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Byte toggle", L"Screen reader prompt for the Calculator byte button. Should read as 'Byte toggle button'.")},
	{L"bitFlip.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Bit toggling keypad", L"Screen reader prompt for the Calculator bitFlip button")},
	{L"fullKeypad.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Full keypad", L"Screen reader prompt for the Calculator numberPad button")},
	{L"decimalSeparatorButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Decimal Separator", L"Screen reader prompt for the '.' button")},
	{L"clearEntryButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear entry", L"Screen reader prompt for the 'CE' button")},
	{L"clearButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear", L"Screen reader prompt for the 'C' button")},
	{L"divideButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Divide by", L"Screen reader prompt for the divide button on the number pad")},
	{L"multiplyButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Multiply by", L"Screen reader prompt for the multiply button on the number pad")},
	{L"equalButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Equals", L"Screen reader prompt for the equals button on the scientific operator keypad")},
	{L"shiftButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Inverse Function", L"Screen Reader prompt for the shift button on the number pad in scientific mode.")},
	{L"minusButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Minus", L"Screen reader prompt for the minus button on the number pad")},
	{L"minus", make_pair<wstring, wstring>(L"Minus", L"We use this resource to replace '-' sign for accessibility. So expression like, 1 - 3 = -2 becomes 1 minus 3 = minus 2")},
	{L"plusButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Plus", L"Screen reader prompt for the plus button on the number pad")},
	{L"squareRootButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Square root", L"Screen reader prompt for the square root button on the scientific operator keypad")},
	{L"percentButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Percent", L"Screen reader prompt for the percent button on the scientific operator keypad")},
	{L"negateButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Positive Negative", L"Screen reader prompt for the negate button on the scientific operator keypad")},
	{L"converterNegateButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Positive Negative", L"Screen reader prompt for the negate button on the converter operator keypad")},
	{L"invertButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Reciprocal", L"Screen reader prompt for the invert button on the scientific operator keypad")},
	{L"openParenthesisButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Left parenthesis", L"Screen reader prompt for the Calculator '(' button on the scientific operator keypad")},
	{L"Format_OpenParenthesisAutomationNamePrefix", make_pair<wstring, wstring>(L"Left parenthesis, open parenthesis count %1", L"{Locked='%1'} Screen reader prompt for the Calculator '(' button on the scientific operator keypad. %1 is the localized count of open parenthesis, e.g. '2'.")},
	{L"closeParenthesisButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Right parenthesis", L"Screen reader prompt for the Calculator ')' button on the scientific operator keypad")},
	{L"Format_OpenParenthesisCountAutomationNamePrefix", make_pair<wstring, wstring>(L"Open parenthesis count %1", L"{Locked='%1'} Screen reader prompt for the Calculator '(' button on the scientific and programmer operator keypad. %1 is the localized count of open parenthesis, e.g. '2'.")},
	{L"NoRightParenthesisAdded_Announcement", make_pair<wstring, wstring>(L"There are no open parentheses to close.", L"{Locked='%1'} Screen reader prompt for the Calculator when the ')' button on the scientific and programmer operator keypad cannot be added to the equation. e.g. '1+)'.")},
	{L"ftoeButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scientific notation", L"Screen reader prompt for the Calculator F-E the scientific operator keypad")},
	{L"hyperbolicButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic function", L"Screen reader prompt for the Calculator button HYP in the scientific operator keypad")},
	{L"piButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Pi", L"Screen reader prompt for the Calculator pi button  on the scientific operator keypad")},
	{L"sinButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Sine", L"Screen reader prompt for the Calculator sin button  on the scientific operator keypad")},
	{L"cosButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Cosine", L"Screen reader prompt for the Calculator cos button  on the scientific operator keypad")},
	{L"tanButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Tangent", L"Screen reader prompt for the Calculator tan button  on the scientific operator keypad")},
	{L"sinhButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Sine", L"Screen reader prompt for the Calculator sinh button  on the scientific operator keypad")},
	{L"coshButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Cosine", L"Screen reader prompt for the Calculator cosh button  on the scientific operator keypad")},
	{L"tanhButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Tangent", L"Screen reader prompt for the Calculator tanh button  on the scientific operator keypad")},
	{L"xpower2Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Square", L"Screen reader prompt for the x squared on the scientific operator keypad. ")},
	{L"xpower3Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Cube", L"Screen reader prompt for the x cubed on the scientific operator keypad. ")},
	{L"invsinButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Arc sine", L"Screen reader prompt for the inverted sin on the scientific operator keypad.")},
	{L"invcosButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Arc cosine", L"Screen reader prompt for the inverted cos on the scientific operator keypad.")},
	{L"invtanButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Arc tangent", L"Screen reader prompt for the inverted tan on the scientific operator keypad.")},
	{L"invsinhButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic arc sine", L"Screen reader prompt for the inverted sinh on the scientific operator keypad.")},
	{L"invcoshButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic arc cosine", L"Screen reader prompt for the inverted cosh on the scientific operator keypad.")},
	{L"invtanhButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic arc tangent", L"Screen reader prompt for the inverted tanh on the scientific operator keypad.")},
	{L"powerButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"'X' to the exponent", L"Screen reader prompt for x power y button on the scientific operator keypad. ")},
	{L"powerOf10Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Ten to the exponent", L"Screen reader prompt for the 10 power x button on the scientific operator keypad.")},
	{L"powerOfEButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"'e' to the exponent", L"Screen reader for the e power x on the scientific operator keypad.")},
	{L"ySquareRootButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"'y' root of 'x'", L"Screen reader for the yth root of x on the scientific operator keypad. Note: String is meant to read out whatever the 'Yth root' mathematical operator sounds like.")},
	{L"logBase10Button.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Log", L"Screen reader for the log base 10  on the scientific operator keypad")},
	{L"logBaseEButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Natural log", L"Screen reader for the log base e on the scientific operator keypad")},
	{L"modButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Modulo", L"Screen reader for the mod button on the scientific operator keypad")},
	{L"expButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Exponential", L"Screen reader for the exp button on the scientific operator keypad")},
	{L"dmsButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Degree Minute Second", L"Screen reader for the exp button on the scientific operator keypad")},
	{L"degreesButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Degrees", L"Screen reader for the exp button on the scientific operator keypad")},
	{L"intButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Integer part", L"Screen reader for the int button on the scientific operator keypad")},
	{L"fractButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Fractional part", L"Screen reader for the frac button on the scientific operator keypad")},
	{L"factorialButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Factorial", L"Screen reader for the factorial button on the basic operator keypad")},
	{L"degButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Degrees toggle", L"This the Deg button's Degree mode automation nameon the scientific operator keypad. Should read as 'Degrees toggle button'.")},
	{L"gradButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Gradians toggle", L"This is the Deg button's Grad mode automation name on the scientific operator keypad. Should read as 'Gradians toggle button'.")},
	{L"radButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Radians toggle", L"This is the Deg button's Rad mode automation name on the scientific operator keypad. Should read as 'Radians toggle button'.")},
	{L"FlyoutNav.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Mode DropDown", L"Screen reader prompt for the Mode dropdown field in Snapped and Portrait modes.")},
	{L"Categories.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Categories DropDown", L"Screen reader prompt for the Categories dropdown field.")},
	{L"EnterAlwaysOnTopButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Keep on top", L"Screen reader prompt for the Always-on-Top button when in normal mode.")},
	{L"ExitAlwaysOnTopButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Back to full view", L"Screen reader prompt for the Always-on-Top button when in Always-on-Top mode.")},
	{L"EnterAlwaysOnTopButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Keep on top (Alt+Up)", L"This is the tool tip automation name for the Always-on-Top button when in normal mode.")},
	{L"ExitAlwaysOnTopButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Back to full view (Alt+Down)", L"This is the tool tip automation name for the Always-on-Top button when in Always-on-Top mode.")},
	{L"Format_ValueFrom", make_pair<wstring, wstring>(L"Convert from %1 %2", L"Screen reader prompt for the Unit Converter Value1 i.e. top number field. %1 = DisplayValue, %2 = Unit field localized name.")},
	{L"Format_ValueFrom_Decimal", make_pair<wstring, wstring>(L"Convert from %1 point %2", L"{Locked='%1'}. Automation label for the calculator display in the specific case where the user has just pressed the decimal separator button. For example, the user wants to input '7.5'.  When they have input '7.' they will hear 'Convert from 7 point _current_unit_'. 'point' should be localized to the locale's appropriate decimal separator.")},
	{L"Format_ValueTo", make_pair<wstring, wstring>(L"Converts into %1 %2", L"Screen reader prompt for the Unit Converter Value2 i.e. bottom number field. %1 = DisplayValue, %2 = Unit field localized name.")},
	{L"Format_ConversionResult", make_pair<wstring, wstring>(L"%1 %2 is %3 %4", L"Screen reader prompt for a conversion result, ie '2 liters is 2,000 milliliters' . %1 = From unit display value, %2 = From unit, %3 = To unit display value, %4 = To unit.")},
	{L"InputUnit_Name", make_pair<wstring, wstring>(L"Input unit", L"Screen reader prompt for the Unit Converter Units1 i.e. top units field.")},
	{L"OutputUnit_Name", make_pair<wstring, wstring>(L"Output unit", L"Screen reader prompt for the Unit Converter Units2 i.e. bottom units field.")},
	{L"CategoryName_AreaText", make_pair<wstring, wstring>(L"Area", L"Unit conversion category name called Area (eg. area of a sports field in square meters)")},
	{L"CategoryName_DataText", make_pair<wstring, wstring>(L"Data", L"Unit conversion category name called Data")},
	{L"CategoryName_EnergyText", make_pair<wstring, wstring>(L"Energy", L"Unit conversion category name called Energy. (eg. the energy in a battery or in food)")},
	{L"CategoryName_LengthText", make_pair<wstring, wstring>(L"Length", L"Unit conversion category name called Length")},
	{L"CategoryName_PowerText", make_pair<wstring, wstring>(L"Power", L"Unit conversion category name called Power (eg. the power of an engine or a light bulb)")},
	{L"CategoryName_SpeedText", make_pair<wstring, wstring>(L"Speed", L"Unit conversion category name called Speed")},
	{L"CategoryName_TimeText", make_pair<wstring, wstring>(L"Time", L"Unit conversion category name called Time")},
	{L"CategoryName_VolumeText", make_pair<wstring, wstring>(L"Volume", L"Unit conversion category name called Volume (eg. cups, teaspoons, milliliters)")},
	{L"CategoryName_TemperatureText", make_pair<wstring, wstring>(L"Temperature", L"Unit conversion category name called Temperature")},
	{L"CategoryName_WeightText", make_pair<wstring, wstring>(L"Weight and Mass", L"Unit conversion category name called Weight and Mass. Note that this category includes units of both mass and weight. People use the word 'weight' in everyday life for measuring things such as food and people. In case a language has same word for 'weight' and 'mass' please use one word only.")},
	{L"CategoryName_PressureText", make_pair<wstring, wstring>(L"Pressure", L"Unit conversion category name called Pressure")},
	{L"CategoryName_AngleText", make_pair<wstring, wstring>(L"Angle", L"Unit conversion category name called Angle")},
	{L"CategoryName_CurrencyText", make_pair<wstring, wstring>(L"Currency", L"Unit conversion category name called Currency")},
	{L"UnitName_FluidOunceUK", make_pair<wstring, wstring>(L"Fluid ounces (UK)", L"A measurement unit for volume, in plural. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_FluidOunceUK", make_pair<wstring, wstring>(L"fl oz (UK)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_FluidOunceUS", make_pair<wstring, wstring>(L"Fluid ounces (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_FluidOunceUS", make_pair<wstring, wstring>(L"fl oz (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_GallonUK", make_pair<wstring, wstring>(L"Gallons (UK)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_GallonUK", make_pair<wstring, wstring>(L"gal (UK)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_GallonUS", make_pair<wstring, wstring>(L"Gallons (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_GallonUS", make_pair<wstring, wstring>(L"gal (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_Liter", make_pair<wstring, wstring>(L"Liters", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Liter", make_pair<wstring, wstring>(L"L", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_Milliliter", make_pair<wstring, wstring>(L"Milliliters", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Milliliter", make_pair<wstring, wstring>(L"mL", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_PintUK", make_pair<wstring, wstring>(L"Pints (UK)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_PintUK", make_pair<wstring, wstring>(L"pt (UK)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_PintUS", make_pair<wstring, wstring>(L"Pints (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_PintUS", make_pair<wstring, wstring>(L"pt (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_TablespoonUS", make_pair<wstring, wstring>(L"Tablespoons (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_TablespoonUS", make_pair<wstring, wstring>(L"tbsp. (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_TeaspoonUS", make_pair<wstring, wstring>(L"Teaspoons (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_TeaspoonUS", make_pair<wstring, wstring>(L"tsp. (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_TablespoonUK", make_pair<wstring, wstring>(L"Tablespoons (UK)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_TablespoonUK", make_pair<wstring, wstring>(L"tbsp. (UK)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_TeaspoonUK", make_pair<wstring, wstring>(L"Teaspoons (UK)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_TeaspoonUK", make_pair<wstring, wstring>(L"tsp. (UK)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_QuartUK", make_pair<wstring, wstring>(L"Quarts (UK)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_QuartUK", make_pair<wstring, wstring>(L"qt (UK)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_QuartUS", make_pair<wstring, wstring>(L"Quarts (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_QuartUS", make_pair<wstring, wstring>(L"qt (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitName_CupUS", make_pair<wstring, wstring>(L"Cups (US)", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_CupUS", make_pair<wstring, wstring>(L"cup (US)", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_Acre", make_pair<wstring, wstring>(L"ac", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_Bit", make_pair<wstring, wstring>(L"b", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_BritishThermalUnit", make_pair<wstring, wstring>(L"BTU", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_BTUPerMinute", make_pair<wstring, wstring>(L"BTU/min", L"An abbreviation for a measurement unit of power")},
	{L"UnitAbbreviation_Byte", make_pair<wstring, wstring>(L"B", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Calorie", make_pair<wstring, wstring>(L"cal", L"An abbreviation for a measurement unit of energy")},
	{L"UnitAbbreviation_Centimeter", make_pair<wstring, wstring>(L"cm", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_CentimetersPerSecond", make_pair<wstring, wstring>(L"cm/s", L"An abbreviation for a measurement unit of speed")},
	{L"UnitAbbreviation_CubicCentimeter", make_pair<wstring, wstring>(L"cm³", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_CubicFoot", make_pair<wstring, wstring>(L"ft³", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_CubicInch", make_pair<wstring, wstring>(L"in³", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_CubicMeter", make_pair<wstring, wstring>(L"m³", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_CubicYard", make_pair<wstring, wstring>(L"yd³", L"An abbreviation for a measurement unit of volume")},
	{L"UnitAbbreviation_Day", make_pair<wstring, wstring>(L"d", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_DegreesCelsius", make_pair<wstring, wstring>(L"°C", L"An abbreviation for 'degrees Celsius'")},
	{L"UnitAbbreviation_DegreesFahrenheit", make_pair<wstring, wstring>(L"°F", L"An abbreviation for a 'degrees Fahrenheit'")},
	{L"UnitAbbreviation_Electron-Volt", make_pair<wstring, wstring>(L"eV", L"An abbreviation for a measurement unit of energy")},
	{L"UnitAbbreviation_Foot", make_pair<wstring, wstring>(L"ft", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_FeetPerSecond", make_pair<wstring, wstring>(L"ft/s", L"An abbreviation for a measurement unit of speed")},
	{L"UnitAbbreviation_Foot-Pound", make_pair<wstring, wstring>(L"ft•lb", L"An abbreviation for a measurement unit of energy")},
	{L"UnitAbbreviation_Gigabit", make_pair<wstring, wstring>(L"Gb", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Gigabyte", make_pair<wstring, wstring>(L"GB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Hectare", make_pair<wstring, wstring>(L"ha", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_Horsepower", make_pair<wstring, wstring>(L"hp (US)", L"An abbreviation for a measurement unit of power")},
	{L"UnitAbbreviation_Hour", make_pair<wstring, wstring>(L"hr", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_Inch", make_pair<wstring, wstring>(L"in", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_Joule", make_pair<wstring, wstring>(L"J", L"An abbreviation for a measurement unit of energy")},
	{L"UnitAbbreviation_Kelvin", make_pair<wstring, wstring>(L"K", L"An abbreviation for the temperature system 'Kelvin' (eg. 0 degrees Celsius = 273 Kelvin)")},
	{L"UnitAbbreviation_Kilobit", make_pair<wstring, wstring>(L"Kb", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Kilobyte", make_pair<wstring, wstring>(L"KB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Kilocalorie", make_pair<wstring, wstring>(L"kcal", L"An abbreviation for a measurement unit of energy")},
	{L"UnitAbbreviation_Kilojoule", make_pair<wstring, wstring>(L"kJ", L"An abbreviation for a measurement unit of energy")},
	{L"UnitAbbreviation_Kilometer", make_pair<wstring, wstring>(L"km", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_KilometersPerHour", make_pair<wstring, wstring>(L"km/h", L"An abbreviation for a measurement unit of speed")},
	{L"UnitAbbreviation_Kilowatt", make_pair<wstring, wstring>(L"kW", L"An abbreviation for a measurement unit of power")},
	{L"UnitAbbreviation_Knot", make_pair<wstring, wstring>(L"kn", L"An abbreviation for a measurement unit of speed")},
	{L"UnitAbbreviation_Mach", make_pair<wstring, wstring>(L"M", L"An abbreviation for a measurement of speed (Mach is the speed of sound, Mach 2 is 2 times the speed of sound)")},
	{L"UnitAbbreviation_Megabit", make_pair<wstring, wstring>(L"Mb", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Megabyte", make_pair<wstring, wstring>(L"MB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Meter", make_pair<wstring, wstring>(L"m", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_MetersPerSecond", make_pair<wstring, wstring>(L"m/s", L"An abbreviation for a measurement unit of speed")},
	{L"UnitAbbreviation_Micron", make_pair<wstring, wstring>(L"µm", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_Microsecond", make_pair<wstring, wstring>(L"µs", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_Mile", make_pair<wstring, wstring>(L"mi", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_MilesPerHour", make_pair<wstring, wstring>(L"mph", L"An abbreviation for a measurement unit of speed")},
	{L"UnitAbbreviation_Millimeter", make_pair<wstring, wstring>(L"mm", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_Millisecond", make_pair<wstring, wstring>(L"ms", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_Minute", make_pair<wstring, wstring>(L"min", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_Nanometer", make_pair<wstring, wstring>(L"nm", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_NauticalMile", make_pair<wstring, wstring>(L"nmi", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_Petabit", make_pair<wstring, wstring>(L"Pb", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Petabyte", make_pair<wstring, wstring>(L"PB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Foot-PoundPerMinute", make_pair<wstring, wstring>(L"ft•lb/min", L"An abbreviation for a measurement unit of power")},
	{L"UnitAbbreviation_Second", make_pair<wstring, wstring>(L"s", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_SquareCentimeter", make_pair<wstring, wstring>(L"cm²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareFoot", make_pair<wstring, wstring>(L"ft²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareInch", make_pair<wstring, wstring>(L"in²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareKilometer", make_pair<wstring, wstring>(L"km²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareMeter", make_pair<wstring, wstring>(L"m²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareMile", make_pair<wstring, wstring>(L"mi²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareMillimeter", make_pair<wstring, wstring>(L"mm²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_SquareYard", make_pair<wstring, wstring>(L"yd²", L"An abbreviation for a measurement unit of area")},
	{L"UnitAbbreviation_Terabit", make_pair<wstring, wstring>(L"Tb", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Terabyte", make_pair<wstring, wstring>(L"TB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Watt", make_pair<wstring, wstring>(L"W", L"An abbreviation for a measurement unit of power")},
	{L"UnitAbbreviation_Week", make_pair<wstring, wstring>(L"wk", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_Yard", make_pair<wstring, wstring>(L"yd", L"An abbreviation for a measurement unit of length")},
	{L"UnitAbbreviation_Year", make_pair<wstring, wstring>(L"yr", L"An abbreviation for a measurement unit of time")},
	{L"UnitAbbreviation_Gibibits", make_pair<wstring, wstring>(L"Gi", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Gibibytes", make_pair<wstring, wstring>(L"GiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Kibibits", make_pair<wstring, wstring>(L"Ki", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Kibibytes", make_pair<wstring, wstring>(L"KiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Mebibits", make_pair<wstring, wstring>(L"Mi", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Mebibytes", make_pair<wstring, wstring>(L"MiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Pebibits", make_pair<wstring, wstring>(L"Pi", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Pebibytes", make_pair<wstring, wstring>(L"PiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Tebibits", make_pair<wstring, wstring>(L"Ti", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Tebibytes", make_pair<wstring, wstring>(L"TiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Exabits", make_pair<wstring, wstring>(L"E", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Exabytes", make_pair<wstring, wstring>(L"EB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Exbibits", make_pair<wstring, wstring>(L"Ei", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Exbibytes", make_pair<wstring, wstring>(L"EiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Zetabits", make_pair<wstring, wstring>(L"Z", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Zetabytes", make_pair<wstring, wstring>(L"ZB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Zebibits", make_pair<wstring, wstring>(L"Zi", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Zebibytes", make_pair<wstring, wstring>(L"ZiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Yottabit", make_pair<wstring, wstring>(L"Y", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Yottabyte", make_pair<wstring, wstring>(L"YB", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Yobibits", make_pair<wstring, wstring>(L"Yi", L"An abbreviation for a measurement unit of data")},
	{L"UnitAbbreviation_Yobibytes", make_pair<wstring, wstring>(L"YiB", L"An abbreviation for a measurement unit of data")},
	{L"UnitName_Acre", make_pair<wstring, wstring>(L"Acres", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Bit", make_pair<wstring, wstring>(L"Bits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_BritishThermalUnit", make_pair<wstring, wstring>(L"British thermal units", L"A measurement unit for energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_BTUPerMinute", make_pair<wstring, wstring>(L"BTUs/minute", L"A measurement unit for power: British Thermal Units per minute. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Byte", make_pair<wstring, wstring>(L"Bytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Calorie", make_pair<wstring, wstring>(L"Thermal calories", L"A measurement unit for energy. Please note that this is the 'small calorie' used in science for measuring heat energy, not the 'large calorie' commonly used for measuring food energy. If there is a simple term to distinguish this one from the large 'Food calorie', please use that. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Centimeter", make_pair<wstring, wstring>(L"Centimeters", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CentimetersPerSecond", make_pair<wstring, wstring>(L"Centimeters per second", L"A measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CubicCentimeter", make_pair<wstring, wstring>(L"Cubic centimeters", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CubicFoot", make_pair<wstring, wstring>(L"Cubic feet", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CubicInch", make_pair<wstring, wstring>(L"Cubic inches", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CubicMeter", make_pair<wstring, wstring>(L"Cubic meters", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CubicYard", make_pair<wstring, wstring>(L"Cubic yards", L"A measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Day", make_pair<wstring, wstring>(L"Days", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_DegreesCelsius", make_pair<wstring, wstring>(L"Celsius", L"An option in the unit converter to select degrees Celsius")},
	{L"UnitName_DegreesFahrenheit", make_pair<wstring, wstring>(L"Fahrenheit", L"An option in the unit converter to select degrees Fahrenheit")},
	{L"UnitName_Electron-Volt", make_pair<wstring, wstring>(L"Electron volts", L"A measurement unit for energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Foot", make_pair<wstring, wstring>(L"Feet", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_FeetPerSecond", make_pair<wstring, wstring>(L"Feet per second", L"A measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Foot-Pound", make_pair<wstring, wstring>(L"Foot-pounds", L"A measurement unit for energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Foot-PoundPerMinute", make_pair<wstring, wstring>(L"Foot-pounds/minute", L"A measurement unit for power. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Gigabit", make_pair<wstring, wstring>(L"Gigabits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Gigabyte", make_pair<wstring, wstring>(L"Gigabytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Hectare", make_pair<wstring, wstring>(L"Hectares", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Horsepower", make_pair<wstring, wstring>(L"Horsepower (US)", L"A measurement unit for power")},
	{L"UnitName_Hour", make_pair<wstring, wstring>(L"Hours", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Inch", make_pair<wstring, wstring>(L"Inches", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Joule", make_pair<wstring, wstring>(L"Joules", L"A measurement unit for energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kelvin", make_pair<wstring, wstring>(L"Kelvin", L"An option in the unit converter to select the temperature system 'Kelvin' (eg. 0 degrees Celsius = 273 Kelvin). At least in English, Kelvin does not use 'degrees'. A measurement is just stated as '273 Kelvin'.")},
	{L"UnitName_Kilobit", make_pair<wstring, wstring>(L"Kilobits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kilobyte", make_pair<wstring, wstring>(L"Kilobytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kilocalorie", make_pair<wstring, wstring>(L"Food calories", L"A measurement unit for energy. The scientific name is kilocalorie, but this is what is commonly referred to as a 'calorie' or 'large calorie' when talking about food. Please use the everyday-use word for food energy calories if there is one. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kilojoule", make_pair<wstring, wstring>(L"Kilojoules", L"A measurement unit for energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kilometer", make_pair<wstring, wstring>(L"Kilometers", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_KilometersPerHour", make_pair<wstring, wstring>(L"Kilometers per hour", L"A measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kilowatt", make_pair<wstring, wstring>(L"Kilowatts", L"A measurement unit for power. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Knot", make_pair<wstring, wstring>(L"Knots", L"A nautical/aerial measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Mach", make_pair<wstring, wstring>(L"Mach", L"A measurement of speed (Mach is the speed of sound, Mach 2 is 2 times the speed of sound)")},
	{L"UnitName_Megabit", make_pair<wstring, wstring>(L"Megabits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Megabyte", make_pair<wstring, wstring>(L"Megabytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Meter", make_pair<wstring, wstring>(L"Meters", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_MetersPerSecond", make_pair<wstring, wstring>(L"Meters per second", L"A measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Micron", make_pair<wstring, wstring>(L"Microns", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Microsecond", make_pair<wstring, wstring>(L"Microseconds", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Mile", make_pair<wstring, wstring>(L"Miles", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_MilesPerHour", make_pair<wstring, wstring>(L"Miles per hour", L"A measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Millimeter", make_pair<wstring, wstring>(L"Millimeters", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Millisecond", make_pair<wstring, wstring>(L"Milliseconds", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Minute", make_pair<wstring, wstring>(L"Minutes", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Nanometer", make_pair<wstring, wstring>(L"Nanometers", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_NauticalMile", make_pair<wstring, wstring>(L"Nautical Miles", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Petabit", make_pair<wstring, wstring>(L"Petabits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Petabyte", make_pair<wstring, wstring>(L"Petabytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Second", make_pair<wstring, wstring>(L"Seconds", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareCentimeter", make_pair<wstring, wstring>(L"Square centimeters", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareFoot", make_pair<wstring, wstring>(L"Square feet", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareInch", make_pair<wstring, wstring>(L"Square inches", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareKilometer", make_pair<wstring, wstring>(L"Square kilometers", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareMeter", make_pair<wstring, wstring>(L"Square meters", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareMile", make_pair<wstring, wstring>(L"Square miles", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareMillimeter", make_pair<wstring, wstring>(L"Square millimeters", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SquareYard", make_pair<wstring, wstring>(L"Square yards", L"A measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Terabit", make_pair<wstring, wstring>(L"Terabits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Terabyte", make_pair<wstring, wstring>(L"Terabytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Watt", make_pair<wstring, wstring>(L"Watts", L"A measurement unit for power. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Week", make_pair<wstring, wstring>(L"Weeks", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Yard", make_pair<wstring, wstring>(L"Yards", L"A measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Year", make_pair<wstring, wstring>(L"Years", L"A measurement unit for time. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Carat", make_pair<wstring, wstring>(L"CD", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Degree", make_pair<wstring, wstring>(L"deg", L"An abbreviation for a measurement unit of Angle")},
	{L"UnitAbbreviation_Radian", make_pair<wstring, wstring>(L"rad", L"An abbreviation for a measurement unit of Angle")},
	{L"UnitAbbreviation_Gradian", make_pair<wstring, wstring>(L"grad", L"An abbreviation for a measurement unit of Angle")},
	{L"UnitAbbreviation_Atmosphere", make_pair<wstring, wstring>(L"atm", L"An abbreviation for a measurement unit of Pressure")},
	{L"UnitAbbreviation_Bar", make_pair<wstring, wstring>(L"ba", L"An abbreviation for a measurement unit of Pressure")},
	{L"UnitAbbreviation_KiloPascal", make_pair<wstring, wstring>(L"kPa", L"An abbreviation for a measurement unit of Pressure")},
	{L"UnitAbbreviation_MillimeterOfMercury", make_pair<wstring, wstring>(L"mmHg", L"An abbreviation for a measurement unit of Pressure")},
	{L"UnitAbbreviation_Pascal", make_pair<wstring, wstring>(L"Pa", L"An abbreviation for a measurement unit of Pressure")},
	{L"UnitAbbreviation_PSI", make_pair<wstring, wstring>(L"psi", L"An abbreviation for a measurement unit of Pressure")},
	{L"UnitAbbreviation_Centigram", make_pair<wstring, wstring>(L"cg", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Decagram", make_pair<wstring, wstring>(L"dag", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Decigram", make_pair<wstring, wstring>(L"dg", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Gram", make_pair<wstring, wstring>(L"g", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Hectogram", make_pair<wstring, wstring>(L"hg", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Kilogram", make_pair<wstring, wstring>(L"kg", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_LongTon", make_pair<wstring, wstring>(L"ton (UK)", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Milligram", make_pair<wstring, wstring>(L"mg", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Ounce", make_pair<wstring, wstring>(L"oz", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Pound", make_pair<wstring, wstring>(L"lb", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_ShortTon", make_pair<wstring, wstring>(L"ton (US)", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Stone", make_pair<wstring, wstring>(L"st", L"An abbreviation for a measurement unit of weight")},
	{L"UnitAbbreviation_Tonne", make_pair<wstring, wstring>(L"t", L"An abbreviation for a measurement unit of weight")},
	{L"UnitName_Carat", make_pair<wstring, wstring>(L"Carats", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Degree", make_pair<wstring, wstring>(L"Degrees", L"A measurement unit for Angle.")},
	{L"UnitName_Radian", make_pair<wstring, wstring>(L"Radians", L"A measurement unit for Angle.")},
	{L"UnitName_Gradian", make_pair<wstring, wstring>(L"Gradians", L"A measurement unit for Angle.")},
	{L"UnitName_Atmosphere", make_pair<wstring, wstring>(L"Atmospheres", L"A measurement unit for Pressure.")},
	{L"UnitName_Bar", make_pair<wstring, wstring>(L"Bars", L"A measurement unit for Pressure.")},
	{L"UnitName_KiloPascal", make_pair<wstring, wstring>(L"Kilopascals", L"A measurement unit for Pressure.")},
	{L"UnitName_MillimeterOfMercury", make_pair<wstring, wstring>(L"Millimeters of mercury ", L"A measurement unit for Pressure.")},
	{L"UnitName_Pascal", make_pair<wstring, wstring>(L"Pascals", L"A measurement unit for Pressure.")},
	{L"UnitName_PSI", make_pair<wstring, wstring>(L"Pounds per square inch", L"A measurement unit for Pressure.")},
	{L"UnitName_Centigram", make_pair<wstring, wstring>(L"Centigrams", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Decagram", make_pair<wstring, wstring>(L"Dekagrams", L"A measurement unit for weight. Note: Dekagram is spelled 'decagram' everywhere except where US English is used. (EN-US dekagram, elsewhere decagram). (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Decigram", make_pair<wstring, wstring>(L"Decigrams", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Gram", make_pair<wstring, wstring>(L"Grams", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Hectogram", make_pair<wstring, wstring>(L"Hectograms", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kilogram", make_pair<wstring, wstring>(L"Kilograms", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_LongTon", make_pair<wstring, wstring>(L"Long tons (UK)", L"A measurement unit for weight. This is the UK version of ton. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Milligram", make_pair<wstring, wstring>(L"Milligrams", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Ounce", make_pair<wstring, wstring>(L"Ounces", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Pound", make_pair<wstring, wstring>(L"Pounds", L"A measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_ShortTon", make_pair<wstring, wstring>(L"Short tons (US)", L"A measurement unit for weight. This is the US version of ton. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Stone", make_pair<wstring, wstring>(L"Stone", L"A measurement unit for weight. Equal to 14 pounds. Note that this is the plural form of the word in English (eg. 'This man weighs 11 stone.'). (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Tonne", make_pair<wstring, wstring>(L"Metric tonnes", L"A measurement unit for weight. This is the metric version of tonne. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CD", make_pair<wstring, wstring>(L"CDs", L"A compact disc, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_CD", make_pair<wstring, wstring>(L"CDs", L"A compact disc, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SoccerField", make_pair<wstring, wstring>(L"soccer fields", L"A professional-sized soccer field, used as a comparison measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_SoccerField", make_pair<wstring, wstring>(L"soccer fields", L"A professional-sized soccer field, used as a comparison measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_FloppyDisk", make_pair<wstring, wstring>(L"floppy disks", L"A 1.44 MB floppy disk, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_FloppyDisk", make_pair<wstring, wstring>(L"floppy disks", L"A 1.44 MB floppy disk, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_DVD", make_pair<wstring, wstring>(L"DVDs", L"A DVD, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_DVD", make_pair<wstring, wstring>(L"DVDs", L"A DVD, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Battery", make_pair<wstring, wstring>(L"batteries", L"AA-cell battery, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Battery", make_pair<wstring, wstring>(L"batteries", L"AA-cell battery, used as a comparison measurement unit for data storage. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Paperclip", make_pair<wstring, wstring>(L"paperclips", L"A standard paperclip, used as a comparison measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Paperclip", make_pair<wstring, wstring>(L"paperclips", L"A standard paperclip, used as a comparison measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_JumboJet", make_pair<wstring, wstring>(L"jumbo jets", L"A jumbo jet (eg. Boeing 747), used as a comparison measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_JumboJet", make_pair<wstring, wstring>(L"jumbo jets", L"A jumbo jet (eg. Boeing 747), used as a comparison measurement unit for length. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_LightBulb", make_pair<wstring, wstring>(L"light bulbs", L"A light bulb, used as a comparison measurement unit for power (60 watts). (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_LightBulb", make_pair<wstring, wstring>(L"light bulbs", L"A light bulb, used as a comparison measurement unit for power (60 watts). (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Horse", make_pair<wstring, wstring>(L"horses", L"A horse, used as a comparison measurement unit for power (~1 horsepower) or speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Horse", make_pair<wstring, wstring>(L"horses", L"A horse, used as a comparison measurement unit for power (~1 horsepower) or speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Bathtub", make_pair<wstring, wstring>(L"bathtubs", L"A bathtub full of water, used as a comparison measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Bathtub", make_pair<wstring, wstring>(L"bathtubs", L"A bathtub full of water, used as a comparison measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Snowflake", make_pair<wstring, wstring>(L"snowflakes", L"A snowflake, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Snowflake", make_pair<wstring, wstring>(L"snowflakes", L"A snowflake, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Elephant", make_pair<wstring, wstring>(L"elephants", L"An elephant, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Elephant", make_pair<wstring, wstring>(L"elephants", L"An elephant, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Turtle", make_pair<wstring, wstring>(L"turtles", L"A turtle, used as a comparison measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Turtle", make_pair<wstring, wstring>(L"turtles", L"A turtle, used as a comparison measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Jet", make_pair<wstring, wstring>(L"jets", L"A jet plane, used as a comparison measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Jet", make_pair<wstring, wstring>(L"jets", L"A jet plane, used as a comparison measurement unit for speed. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Whale", make_pair<wstring, wstring>(L"whales", L"A blue whale, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Whale", make_pair<wstring, wstring>(L"whales", L"A blue whale, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_CoffeeCup", make_pair<wstring, wstring>(L"coffee cups", L"A coffee cup, used as a comparison measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_CoffeeCup", make_pair<wstring, wstring>(L"coffee cups", L"A coffee cup, used as a comparison measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SwimmingPool", make_pair<wstring, wstring>(L"swimming pools", L"An Olympic-sized swimming pool, used as a comparison measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_SwimmingPool", make_pair<wstring, wstring>(L"swimming pools", L"An Olympic-sized swimming pool, used as a comparison measurement unit for volume. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Hand", make_pair<wstring, wstring>(L"hands", L"A human hand, used as a comparison measurement unit for length or area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Hand", make_pair<wstring, wstring>(L"hands", L"A human hand, used as a comparison measurement unit for length or area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Paper", make_pair<wstring, wstring>(L"sheets of paper", L"A sheet of 8.5 x 11 inch paper, used as a comparison measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Paper", make_pair<wstring, wstring>(L"sheets of paper", L"A sheet of 8.5 x 11 inch paper, used as a comparison measurement unit for area. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Castle", make_pair<wstring, wstring>(L"castles", L"A castle, used as a comparison measurement unit for area (floorspace). (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Castle", make_pair<wstring, wstring>(L"castles", L"A castle, used as a comparison measurement unit for area (floorspace). (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Banana", make_pair<wstring, wstring>(L"bananas", L"A banana, used as a comparison measurement unit for food energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_Banana", make_pair<wstring, wstring>(L"bananas", L"A banana, used as a comparison measurement unit for food energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SliceOfCake", make_pair<wstring, wstring>(L"slices of cake", L"A slice of chocolate cake, used as a comparison measurement unit for food energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_SliceOfCake", make_pair<wstring, wstring>(L"slices of cake", L"A slice of chocolate cake, used as a comparison measurement unit for food energy. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_TrainEngine", make_pair<wstring, wstring>(L"train engines", L"A train engine, used as a comparison measurement unit for power. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_TrainEngine", make_pair<wstring, wstring>(L"train engines", L"A train engine, used as a comparison measurement unit for power. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_SoccerBall", make_pair<wstring, wstring>(L"soccer balls", L"A soccer ball, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitAbbreviation_SoccerBall", make_pair<wstring, wstring>(L"soccer balls", L"A soccer ball, used as a comparison measurement unit for weight. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"degButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F4", L"{Locked}This is the shortcut for the DEG command, that sets the scientific calculator in degree mode. This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"radButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F5", L"{Locked}This is the shortcut for the RAD command, that sets the scientific calculator in radian mode. This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"gradButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F3", L"{Locked}This is the shortcut for the GRAD command, that sets the scientific calculator in grad mode. This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"MemoryItemHelpText", make_pair<wstring, wstring>(L"Memory Item", L"Help text used by accessibility tools to indicate that an item in the list of memory values is a memory item.")},
	{L"SupplementaryUnit_AutomationName", make_pair<wstring, wstring>(L"%1 %2", L"This string is what is read by Narrator, and other screen readers, for the supplementary value at the bottom of the converter view, %1 = the value of the supplementary unit (i.e. 0.5), %2 = the unit itself (i.e. inches, meters, etc)")},
	{L"AboutControlBackButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Back", L"Screen reader prompt for the About panel back button")},
	{L"AboutControlBackButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Back", L"Content of tooltip being displayed on AboutControlBackButton")},
	{L"AboutFlyoutEULA.Text", make_pair<wstring, wstring>(L"Microsoft Software License Terms", L"Displayed on a link to the Microsoft Software License Terms on the About panel")},
	{L"PreviewTag.Text", make_pair<wstring, wstring>(L"Preview", L"Label displayed next to upcoming features")},
	{L"AboutControlPrivacyStatement.Text", make_pair<wstring, wstring>(L"Microsoft Privacy Statement", L"Displayed on a link to the Microsoft Privacy Statement on the About panel")},
	{L"AboutControlCopyright", make_pair<wstring, wstring>(L"© %1 Microsoft. All rights reserved.", L"{Locked='%1'}. Copyright statement, displayed on the About panel. %1 = the current year (4 digits)")},
	{L"AboutButton.Content", make_pair<wstring, wstring>(L"About", L"The text that shows in the dropdown navigation control to open About panel")},
	{L"FeedbackButton.Content", make_pair<wstring, wstring>(L"Send feedback", L"The text that shows in the dropdown navigation control to give the user the option to send feedback about the app and it launches Windows Feedback app")},
	{L"LocalizedFontFamilyOverride", make_pair<wstring, wstring>(L"RESERVED_FOR_FONTLOC", L"{Locked}Leave as RESERVED_FOR_FONTLOC unless the font localization value provided by the WinRT LanguageFontGroup API should be overridden. In that case, enter the font family (e.g. 'Segoe UI'). If any of the font overrides are modified then all of them need to be modified.")},
	{L"LocalizedFontWeightOverride", make_pair<wstring, wstring>(L"RESERVED_FOR_FONTLOC", L"{Locked}Leave as RESERVED_FOR_FONTLOC unless the font localization value provided by the WinRT LanguageFontGroup API should be overridden. In that case, enter the font Weight (e.g. 'light'). If any of the font overrides are modified then all of them need to be modified.")},
	{L"LocalizedUICaptionFontSizeFactorOverride", make_pair<wstring, wstring>(L"RESERVED_FOR_FONTLOC", L"{Locked}Leave as RESERVED_FOR_FONTLOC unless the font localization value provided by the WinRT LanguageFontGroup API should be overridden. In that case, enter the font scale factor to be used as a replacement for UICaptionFont.ScaleFactor (scale factor is a specified in percentage scaling; i.e. 100 = no scaling). If any of the font overrides are modified then all of them need to be modified.")},
	{L"LocalizedUITextFontSizeFactorOverride", make_pair<wstring, wstring>(L"RESERVED_FOR_FONTLOC", L"{Locked}Leave as RESERVED_FOR_FONTLOC unless the font localization value provided by the WinRT LanguageFontGroup API should be overridden. In that case, enter the font scale factor to be used as a replacement for UITextFont.ScaleFactor (scale factor is a specified in percentage scaling; i.e. 100 = no scaling). If any of the font overrides are modified then all of them need to be modified.")},
	{L"Bin", make_pair<wstring, wstring>(L"BIN", L"{Locked}The Binary button")},
	{L"Dec", make_pair<wstring, wstring>(L"DEC", L"{Locked}The Decimal button")},
	{L"Hex", make_pair<wstring, wstring>(L"HEX", L"{Locked}The Hex button")},
	{L"Oct", make_pair<wstring, wstring>(L"OCT", L"{Locked}The Octal button")},
	{L"HistoryEmpty.Text", make_pair<wstring, wstring>(L"There’s no history yet", L"The text that shows as the header for the history list")},
	{L"MemoryPaneEmpty.Text", make_pair<wstring, wstring>(L"There’s nothing saved in memory", L"The text that shows as the header for the memory list")},
	{L"MemoryFlyout.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory", L"Screen reader prompt for the negate button on the converter operator keypad")},
	{L"CannotPaste", make_pair<wstring, wstring>(L"This expression cannot be pasted", L"The paste operation cannot be performed, if the expression is invalid.")},
	{L"wordButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F4", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"qwordButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F2", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"byteButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F12", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"dwordButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"F3", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"UnitName_Gibibits", make_pair<wstring, wstring>(L"Gibibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Gibibytes", make_pair<wstring, wstring>(L"Gibibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kibibits", make_pair<wstring, wstring>(L"Kibibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Kibibytes", make_pair<wstring, wstring>(L"Kibibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Mebibits", make_pair<wstring, wstring>(L"Mebibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Mebibytes", make_pair<wstring, wstring>(L"Mebibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Pebibits", make_pair<wstring, wstring>(L"Pebibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Pebibytes", make_pair<wstring, wstring>(L"Pebibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Tebibits", make_pair<wstring, wstring>(L"Tebibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Tebibytes", make_pair<wstring, wstring>(L"Tebibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Exabits", make_pair<wstring, wstring>(L"Exabits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Exabytes", make_pair<wstring, wstring>(L"Exabytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Exbibits", make_pair<wstring, wstring>(L"Exbibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Exbibytes", make_pair<wstring, wstring>(L"Exbibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Zetabits", make_pair<wstring, wstring>(L"Zetabits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Zetabytes", make_pair<wstring, wstring>(L"Zetabytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Zebibits", make_pair<wstring, wstring>(L"Zebibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Zebibytes", make_pair<wstring, wstring>(L"Zebibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Yottabit", make_pair<wstring, wstring>(L"Yottabit", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Yottabyte", make_pair<wstring, wstring>(L"Yottabyte", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Yobibits", make_pair<wstring, wstring>(L"Yobibits", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"UnitName_Yobibytes", make_pair<wstring, wstring>(L"Yobibytes", L"A measurement unit for data. (Please choose the most appropriate plural form to fit any number between 0 and 999,999,999,999,999)")},
	{L"DateCalculationModeText", make_pair<wstring, wstring>(L"Date Calculation", L"")},
	{L"DateCalculationOption.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Calculation mode", L"Automation label for the Date Calculation Mode combobox. Users will hear 'Calculation mode combobox'.")},
	{L"AddOption.Content", make_pair<wstring, wstring>(L"Add", L"Add toggle button text")},
	{L"Date_AddSubtractOption.Content", make_pair<wstring, wstring>(L"Add or subtract days", L"Add or Subtract days option")},
	{L"DateLabel.Text", make_pair<wstring, wstring>(L"Date", L"Date result label")},
	{L"Date_DifferenceOption.Content", make_pair<wstring, wstring>(L"Difference between dates", L"Date Difference option")},
	{L"DaysLabel.Text", make_pair<wstring, wstring>(L"Days", L"Add/Subtract Days label")},
	{L"Date_DifferenceLabel.Text", make_pair<wstring, wstring>(L"Difference", L"Difference result label")},
	{L"DateDiff_FromHeader.Header", make_pair<wstring, wstring>(L"From", L"From Date Header for Difference Date Picker")},
	{L"MonthsLabel.Text", make_pair<wstring, wstring>(L"Months", L"Add/Subtract Months label")},
	{L"SubtractOption.Content", make_pair<wstring, wstring>(L"Subtract", L"Subtract toggle button text")},
	{L"DateDiff_ToHeader.Header", make_pair<wstring, wstring>(L"To", L"To Date Header for Difference Date Picker")},
	{L"YearsLabel.Text", make_pair<wstring, wstring>(L"Years", L"Add/Subtract Years label")},
	{L"Date_OutOfBoundMessage", make_pair<wstring, wstring>(L"Date out of Bound", L"Out of bound message shown as result when the date calculation exceeds the bounds")},
	{L"Date_Day", make_pair<wstring, wstring>(L"day", L"")},
	{L"Date_Days", make_pair<wstring, wstring>(L"days", L"")},
	{L"Date_Month", make_pair<wstring, wstring>(L"month", L"")},
	{L"Date_Months", make_pair<wstring, wstring>(L"months", L"")},
	{L"Date_SameDates", make_pair<wstring, wstring>(L"Same dates", L"")},
	{L"Date_Week", make_pair<wstring, wstring>(L"week", L"")},
	{L"Date_Weeks", make_pair<wstring, wstring>(L"weeks", L"")},
	{L"Date_Year", make_pair<wstring, wstring>(L"year", L"")},
	{L"Date_Years", make_pair<wstring, wstring>(L"years", L"")},
	{L"Date_DifferenceResultAutomationName", make_pair<wstring, wstring>(L"Difference %1", L"Automation name for reading out the date difference. %1 =  Date difference")},
	{L"Date_ResultingDateAutomationName", make_pair<wstring, wstring>(L"Resulting date %1", L"Automation name for reading out the resulting date in Add/Subtract mode. %1 = Resulting date")},
	{L"HeaderAutomationName_Calculator", make_pair<wstring, wstring>(L"%1 Calculator mode", L"{Locked='%1'} Automation name for when the mode header is focused. %1 = the current calculator mode: Scientific, Standard, or Programmer.")},
	{L"HeaderAutomationName_Converter", make_pair<wstring, wstring>(L"%1 Converter mode", L"{Locked='%1'} Automation name for when the mode header is focused. %1 = the current converter mode: 'Weight and Mass', 'Energy', 'Volume', etc.")},
	{L"HeaderAutomationName_Date", make_pair<wstring, wstring>(L"Date Calculation mode", L"Automation name for when the mode header is focused and the current mode is Date Calculation.")},
	{L"DockPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"History and Memory lists", L"Automation name for the group of controls for history and memory lists.")},
	{L"MemoryPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Memory controls", L"Automation name for the group of memory controls (Mem Clear, Mem Recall, Mem Add, Mem Subtract, Mem Store, Memory flyout toggle)")},
	{L"StandardFunctions.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Standard functions", L"Automation name for the group of standard function buttons (Percent, Square Root, Square, Cube, Reciprocal)")},
	{L"DisplayControls.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Display controls", L"Automation name for the group of display control buttons (Clear, Clear Entry, and Backspace)")},
	{L"StandardOperators.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Standard operators", L"Automation name for the group of standard operator buttons (Add, Subtract, Multiply, Divide, and Equals)")},
	{L"NumberPad.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Number pad", L"Automation name for the group of NumberPad buttons (0-9, A-F and Decimal button)")},
	{L"ScientificAngleOperators.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Angle operators", L"Automation name for the group of Scientific angle operators (Degree mode, Hyperbolic toggle, and Precision button)")},
	{L"ScientificFunctions.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scientific functions", L"Automation name for the group of Scientific functions.")},
	{L"RadixGroup.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Radix selection", L"Automation name for the group of radices (Hexadecimal, Decimal, Octal, Binary). https://en.wikipedia.org/wiki/Radix ")},
	{L"ProgrammerOperators.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Programmer operators", L"Automation name for the group of programmer operators (RoL, RoR, Lsh, Rsh, OR, XOR, NOT, AND).")},
	{L"InputModeSelectionGroup.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Input mode selection", L"Automation name for the group of input mode toggling buttons.")},
	{L"BitFlipPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Bit toggling keypad", L"Automation name for the group of bit toggling buttons.")},
	{L"scrollLeft.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scroll expression left", L"Automation label for the 'scroll left' button that appears when an expression is too large to fit in the window.")},
	{L"scrollRight.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scroll expression right", L"Automation label for the 'scroll right' button that appears when an expression is too large to fit in the window.")},
	{L"Format_MaxDigitsReached", make_pair<wstring, wstring>(L"Max digits reached. %1", L"{Locked='%1'} Formatting string for a Narrator announcement when user reaches max digits. The %1 is the automation name of the display. Users will hear 'Max digits reached. Display is _current_value_'.")},
	{L"Format_ButtonPressAuditoryFeedback", make_pair<wstring, wstring>(L"%1 %2", L"{Locked='%1','%2'} Formatting string for a Narrator announcement when user presses a button with auditory feedback. '%1' is the display value and '%2' is the button press feedback. Example, user presses 'plus' and hears 'Display is 7 plus'.")},
	{L"Format_MemorySave", make_pair<wstring, wstring>(L"%1 saved to memory", L"{Locked='%1'} Formatting string for a Narrator announcement when the user stores a number to memory. The %1 is the automation name of the display. Users will hear '_current_value_ saved to memory'.")},
	{L"Format_MemorySlotChanged", make_pair<wstring, wstring>(L"Memory slot %1 is %2", L"{Locked='%1','%2'} Formatting string for a Narrator announcement when the user changes a memory slot. The %1 is the index of the memory slot and %2 is the new value. For example, users might hear 'Memory slot 2 is 37'.")},
	{L"Format_MemorySlotCleared", make_pair<wstring, wstring>(L"Memory slot %1 cleared", L"{Locked='%1'} Formatting string for a Narrator announcement when the user clears a memory slot. The %1 is the index of the memory slot. For example, users might hear 'Memory slot 2 cleared'.")},
	{L"divideButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"divided by", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 divided by' when the button is pressed.")},
	{L"multiplyButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"times", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 times' when the button is pressed.")},
	{L"minusButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"minus", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 minus' when the button is pressed.")},
	{L"plusButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"plus", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 plus' when the button is pressed.")},
	{L"powerButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"to the power of", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 to the power of' when the button is pressed.")},
	{L"ySquareRootButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"y root", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 y root' when the button is pressed.")},
	{L"modButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"mod", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 mod' when the button is pressed.")},
	{L"lshButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"left shift", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 left shift' when the button is pressed.")},
	{L"rshButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"right shift", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 right shift' when the button is pressed.")},
	{L"orButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"or", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 or' when the button is pressed. OR is a mathematical operation on two binary values.")},
	{L"xorButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"x or", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 x or' when the button is pressed. XOR is a mathematical operation on two binary values. Here the feedback is 'x or' in order to get the correct pronunciation.")},
	{L"andButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"and", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 and' when the button is pressed. AND is a mathematical operation on two binary values.")},
	{L"CurrencyFromToRatioFormat", make_pair<wstring, wstring>(L"%1 %2 = %3 %4", L"The exact ratio between converted currencies, e.g. '1 USD = 0.8885 EUR'. %1 will always be '1'. %2 is the From currency code. %3 is the formatted conversion ratio. %4 is the To currency code.")},
	{L"CurrencyTimestampFormat", make_pair<wstring, wstring>(L"Updated %1 %2", L"The timestamp of currency conversion ratios fetched from an online service. %1 is the date. %2 is the time. Example: 'Updated Sep 28, 2016 5:42 PM'")},
	{L"RefreshButtonText.Content", make_pair<wstring, wstring>(L"Update rates", L"The text displayed for a hyperlink button that refreshes currency converter ratios.")},
	{L"DataChargesMayApply", make_pair<wstring, wstring>(L"Data charges may apply.", L"The text displayed when users are on a metered connection and using currency converter.")},
	{L"FailedToRefresh", make_pair<wstring, wstring>(L"Couldn’t get new rates. Try again later.", L"The text displayed when currency ratio data fails to load.")},
	{L"OfflineStatusHyperlinkText", make_pair<wstring, wstring>(L"Offline. Please check your%HL%Network Settings%HL%", L"Status text displayed when currency converter is disconnected from the internet. The text 'Notification Settings' should be surrounded by %HL% since they are used to indicate that that text should be the hyperlink text. {Locked='%HL%'}")},
	{L"UpdatingCurrencyRates", make_pair<wstring, wstring>(L"Updating currency rates", L"This string is what is read by Narrator, and other screen readers, when the 'Update rates' button in the Currency Converter is clicked.")},
	{L"CurrencyRatesUpdated", make_pair<wstring, wstring>(L"Currency rates updated", L"This string is what is read by Narrator, and other screen readers, when the currency rates in Currency converter have successfully updated.")},
	{L"CurrencyRatesUpdateFailed", make_pair<wstring, wstring>(L"Could not update rates", L"This string is what is read by Narrator, and other screen readers, when the currency rates in Currency converter have failed to update.")},
	{L"AboutButton.AccessKey", make_pair<wstring, wstring>(L"AB", L"AccessKey for the About button. {StringCategory='Accelerator'}")},
	{L"HistoryButton.AccessKey", make_pair<wstring, wstring>(L"I", L"Access key for the History button. {StringCategory='Accelerator'}")},
	{L"MemoryButton.AccessKey", make_pair<wstring, wstring>(L"M", L"Access key for the Memory button. {StringCategory='Accelerator'}")},
	{L"NavView.AccessKey", make_pair<wstring, wstring>(L"H", L"Access key for the Hamburger button. {StringCategory='Accelerator'}")},
	{L"CategoryName_AngleAccessKey", make_pair<wstring, wstring>(L"AN", L"AccessKey for the angle converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_AreaAccessKey", make_pair<wstring, wstring>(L"AR", L"AccessKey for the area converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_CurrencyAccessKey", make_pair<wstring, wstring>(L"C", L"AccessKey for the currency converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_DataAccessKey", make_pair<wstring, wstring>(L"D", L"AccessKey for the data converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_EnergyAccessKey", make_pair<wstring, wstring>(L"E", L"AccessKey for the energy converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_LengthAccessKey", make_pair<wstring, wstring>(L"L", L"AccessKey for the length converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_PowerAccessKey", make_pair<wstring, wstring>(L"PO", L"AccessKey for the power converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_PressureAccessKey", make_pair<wstring, wstring>(L"PR", L"AccessKey for the pressure converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_SpeedAccessKey", make_pair<wstring, wstring>(L"S", L"AccessKey for the speed converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_TimeAccessKey", make_pair<wstring, wstring>(L"TI", L"AccessKey for the time converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_VolumeAccessKey", make_pair<wstring, wstring>(L"V", L"AccessKey for the volume converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_WeightAccessKey", make_pair<wstring, wstring>(L"W", L"AccessKey for the weight converter navbar item. {StringCategory='Accelerator'}")},
	{L"CategoryName_TemperatureAccessKey", make_pair<wstring, wstring>(L"TE", L"AccessKey for the temperature converter navbar item. {StringCategory='Accelerator'}")},
	{L"ClearHistory.AccessKey", make_pair<wstring, wstring>(L"C", L"Access key for the Clear history button.{StringCategory='Accelerator'}")},
	{L"ClearMemory.AccessKey", make_pair<wstring, wstring>(L"C", L"Access key for the Clear memory button. {StringCategory='Accelerator'}")},
	{L"ClearMemory.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Clear all memory (Ctrl+L)", L"This is the tool tip automation name for the Clear Memory button in the Memory Pane.")},
	{L"ClearMemory.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Clear all memory", L"Screen reader prompt for the Calculator Clear Memory button in the Memory Pane")},
	{L"HistoryLabel.AccessKey", make_pair<wstring, wstring>(L"I", L"Access key for the History pivot item.{StringCategory='Accelerator'}")},
	{L"MemoryLabel.AccessKey", make_pair<wstring, wstring>(L"M", L"Access key for the Memory pivot item.{StringCategory='Accelerator'}")},
	{L"SineDegrees", make_pair<wstring, wstring>(L"sine degrees", L"Name for the sine function in degrees mode. Used by screen readers.")},
	{L"SineRadians", make_pair<wstring, wstring>(L"sine radians", L"Name for the sine function in radians mode. Used by screen readers.")},
	{L"SineGradians", make_pair<wstring, wstring>(L"sine gradians", L"Name for the sine function in gradians mode. Used by screen readers.")},
	{L"InverseSineDegrees", make_pair<wstring, wstring>(L"inverse sine degrees", L"Name for the inverse sine function in degrees mode. Used by screen readers.")},
	{L"InverseSineRadians", make_pair<wstring, wstring>(L"inverse sine radians", L"Name for the inverse sine function in radians mode. Used by screen readers.")},
	{L"InverseSineGradians", make_pair<wstring, wstring>(L"inverse sine gradians", L"Name for the inverse sine function in gradians mode. Used by screen readers.")},
	{L"HyperbolicSine", make_pair<wstring, wstring>(L"hyperbolic sine", L"Name for the hyperbolic sine function. Used by screen readers.")},
	{L"InverseHyperbolicSine", make_pair<wstring, wstring>(L"inverse hyperbolic sine", L"Name for the inverse hyperbolic sine function. Used by screen readers.")},
	{L"CosineDegrees", make_pair<wstring, wstring>(L"cosine degrees", L"Name for the cosine function in degrees mode. Used by screen readers.")},
	{L"CosineRadians", make_pair<wstring, wstring>(L"cosine radians", L"Name for the cosine function in radians mode. Used by screen readers.")},
	{L"CosineGradians", make_pair<wstring, wstring>(L"cosine gradians", L"Name for the cosine function in gradians mode. Used by screen readers.")},
	{L"InverseCosineDegrees", make_pair<wstring, wstring>(L"inverse cosine degrees", L"Name for the inverse cosine function in degrees mode. Used by screen readers.")},
	{L"InverseCosineRadians", make_pair<wstring, wstring>(L"inverse cosine radians", L"Name for the inverse cosine function in radians mode. Used by screen readers.")},
	{L"InverseCosineGradians", make_pair<wstring, wstring>(L"inverse cosine gradians", L"Name for the inverse cosine function in gradians mode. Used by screen readers.")},
	{L"HyperbolicCosine", make_pair<wstring, wstring>(L"hyperbolic cosine", L"Name for the hyperbolic cosine function. Used by screen readers.")},
	{L"InverseHyperbolicCosine", make_pair<wstring, wstring>(L"inverse hyperbolic cosine", L"Name for the inverse hyperbolic cosine function. Used by screen readers.")},
	{L"TangentDegrees", make_pair<wstring, wstring>(L"tangent degrees", L"Name for the tangent function in degrees mode. Used by screen readers.")},
	{L"TangentRadians", make_pair<wstring, wstring>(L"tangent radians", L"Name for the tangent function in radians mode. Used by screen readers.")},
	{L"TangentGradians", make_pair<wstring, wstring>(L"tangent gradians", L"Name for the tangent function in gradians mode. Used by screen readers.")},
	{L"InverseTangentDegrees", make_pair<wstring, wstring>(L"inverse tangent degrees", L"Name for the inverse tangent function in degrees mode. Used by screen readers.")},
	{L"InverseTangentRadians", make_pair<wstring, wstring>(L"inverse tangent radians", L"Name for the inverse tangent function in radians mode. Used by screen readers.")},
	{L"InverseTangentGradians", make_pair<wstring, wstring>(L"inverse tangent gradians", L"Name for the inverse tangent function in gradians mode. Used by screen readers.")},
	{L"HyperbolicTangent", make_pair<wstring, wstring>(L"hyperbolic tangent", L"Name for the hyperbolic tangent function. Used by screen readers.")},
	{L"InverseHyperbolicTangent", make_pair<wstring, wstring>(L"inverse hyperbolic tangent", L"Name for the inverse hyperbolic tangent function. Used by screen readers.")},
	{L"SecantDegrees", make_pair<wstring, wstring>(L"secant degrees", L"Name for the secant function in degrees mode. Used by screen readers.")},
	{L"SecantRadians", make_pair<wstring, wstring>(L"secant radians", L"Name for the secant function in radians mode. Used by screen readers.")},
	{L"SecantGradians", make_pair<wstring, wstring>(L"secant gradians", L"Name for the secant function in gradians mode. Used by screen readers.")},
	{L"InverseSecantDegrees", make_pair<wstring, wstring>(L"inverse secant degrees", L"Name for the inverse secant function in degrees mode. Used by screen readers.")},
	{L"InverseSecantRadians", make_pair<wstring, wstring>(L"inverse secant radians", L"Name for the inverse secant function in radians mode. Used by screen readers.")},
	{L"InverseSecantGradians", make_pair<wstring, wstring>(L"inverse secant gradians", L"Name for the inverse secant function in gradians mode. Used by screen readers.")},
	{L"HyperbolicSecant", make_pair<wstring, wstring>(L"hyperbolic secant", L"Name for the hyperbolic secant function. Used by screen readers.")},
	{L"InverseHyperbolicSecant", make_pair<wstring, wstring>(L"inverse hyperbolic secant", L"Name for the inverse hyperbolic secant function. Used by screen readers.")},
	{L"CosecantDegrees", make_pair<wstring, wstring>(L"cosecant degrees", L"Name for the cosecant function in degrees mode. Used by screen readers.")},
	{L"CosecantRadians", make_pair<wstring, wstring>(L"cosecant radians", L"Name for the cosecant function in radians mode. Used by screen readers.")},
	{L"CosecantGradians", make_pair<wstring, wstring>(L"cosecant gradians", L"Name for the cosecant function in gradians mode. Used by screen readers.")},
	{L"InverseCosecantDegrees", make_pair<wstring, wstring>(L"inverse cosecant degrees", L"Name for the inverse cosecant function in degrees mode. Used by screen readers.")},
	{L"InverseCosecantRadians", make_pair<wstring, wstring>(L"inverse cosecant radians", L"Name for the inverse cosecant function in radians mode. Used by screen readers.")},
	{L"InverseCosecantGradians", make_pair<wstring, wstring>(L"inverse cosecant gradians", L"Name for the inverse cosecant function in gradians mode. Used by screen readers.")},
	{L"HyperbolicCosecant", make_pair<wstring, wstring>(L"hyperbolic cosecant", L"Name for the hyperbolic cosecant function. Used by screen readers.")},
	{L"InverseHyperbolicCosecant", make_pair<wstring, wstring>(L"inverse hyperbolic cosecant", L"Name for the inverse hyperbolic cosecant function. Used by screen readers.")},
	{L"CotangentDegrees", make_pair<wstring, wstring>(L"cotangent degrees", L"Name for the cotangent function in degrees mode. Used by screen readers.")},
	{L"CotangentRadians", make_pair<wstring, wstring>(L"Cotangent radians", L"Name for the cotangent function in radians mode. Used by screen readers.")},
	{L"CotangentGradians", make_pair<wstring, wstring>(L"cotangent gradians", L"Name for the cotangent function in gradians mode. Used by screen readers.")},
	{L"InverseCotangentDegrees", make_pair<wstring, wstring>(L"inverse cotangent degrees", L"Name for the inverse cotangent function in degrees mode. Used by screen readers.")},
	{L"InverseCotangentRadians", make_pair<wstring, wstring>(L"inverse cotangent radians", L"Name for the inverse cotangent function in radians mode. Used by screen readers.")},
	{L"InverseCotangentGradians", make_pair<wstring, wstring>(L"inverse cotangent gradians", L"Name for the inverse cotangent function in gradians mode. Used by screen readers.")},
	{L"HyperbolicCotangent", make_pair<wstring, wstring>(L"hyperbolic cotangent", L"Name for the hyperbolic cotangent function. Used by screen readers.")},
	{L"InverseHyperbolicCotangent", make_pair<wstring, wstring>(L"inverse hyperbolic cotangent", L"Name for the inverse hyperbolic cotangent function. Used by screen readers.")},
	{L"CubeRoot", make_pair<wstring, wstring>(L"Cube Root", L"Name for the cube root function. Used by screen readers.")},
	{L"Logy", make_pair<wstring, wstring>(L"Log Base", L"Name for the logbasey function. Used by screen readers.")},
	{L"AbsoluteValue", make_pair<wstring, wstring>(L"Absolute Value", L"Name for the absolute value function. Used by screen readers.")},
	{L"LeftShift", make_pair<wstring, wstring>(L"left shift", L"Name for the programmer function that shifts bits to the left. Used by screen readers.")},
	{L"RightShift", make_pair<wstring, wstring>(L"right shift", L"Name for the programmer function that shifts bits to the right. Used by screen readers.")},
	{L"Factorial", make_pair<wstring, wstring>(L"factorial", L"Name for the factorial function. Used by screen readers.")},
	{L"DegreeMinuteSecond", make_pair<wstring, wstring>(L"degree minute second", L"Name for the degree minute second (dms) function. Used by screen readers.")},
	{L"NaturalLog", make_pair<wstring, wstring>(L"natural log", L"Name for the natural log (ln) function. Used by screen readers.")},
	{L"Square", make_pair<wstring, wstring>(L"square", L"Name for the square function. Used by screen readers.")},
	{L"YRoot", make_pair<wstring, wstring>(L"y root", L"Name for the y root function. Used by screen readers.")},
	{L"NavCategoryItem_AutomationNameFormat", make_pair<wstring, wstring>(L"%1 %2", L"{Locked='%1','%2'}.  Format string for the accessible name of a Calculator menu item, used by screen readers. '%1' is the item name, e.g. Standard, Programmer, etc. %2 is the category name, e.g. Calculator, Converter. An example when formatted is 'Standard Calculator' or 'Currency Converter'.")},
	{L"NavCategoryHeader_AutomationNameFormat", make_pair<wstring, wstring>(L"%1 category", L"{Locked='%1'} Format string for the accessible name of a Calculator menu category header, used by screen readers. '%1' is the pluralized category name, e.g. Calculators, Converters. An example when formatted is 'Calculators category'.")},
	{L"AboutControlServicesAgreement.Text", make_pair<wstring, wstring>(L"Microsoft Services Agreement", L"Displayed on a link to the Microsoft Services Agreement in the about this app information")},
	{L"UnitAbbreviation_Pyeong", make_pair<wstring, wstring>(L"Pyeong", L"An abbreviation for a measurement unit of area.")},
	{L"UnitName_Pyeong", make_pair<wstring, wstring>(L"Pyeong", L"A measurement unit for area.")},
	{L"AddSubtract_Date_FromHeader.Header", make_pair<wstring, wstring>(L"From", L"From Date Header for AddSubtract Date Picker")},
	{L"CalculationResultScrollLeft.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scroll Calculation Result Left", L"Automation label for the 'Scroll Left' button that appears when a calculation result is too large to fit in calculation result text box.")},
	{L"CalculationResultScrollRight.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scroll Calculation Result Right", L"Automation label for the 'Scroll Right' button that appears when a calculation result is too large to fit in calculation result text box.")},
	{L"CalculationFailed", make_pair<wstring, wstring>(L"Calculation failed", L"Text displayed when the application is not able to do a calculation")},
	{L"logBaseY.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Log base Y", L"Screen reader prompt for the logBaseY button")},
	{L"logBaseY.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"L", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"trigButton.Text", make_pair<wstring, wstring>(L"Trigonometry", L"Displayed on the button that contains a flyout for the trig functions in scientific mode.")},
	{L"funcButton.Text", make_pair<wstring, wstring>(L"Function", L"Displayed on the button that contains a flyout for the general functions in scientific mode.")},
	{L"inequalityButton.Text", make_pair<wstring, wstring>(L"Inequalities", L"Displayed on the button that contains a flyout for the inequality functions.")},
	{L"inequalityButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Inequalities", L"Screen reader prompt for the Inequalities button")},
	{L"bitwiseButton.Text", make_pair<wstring, wstring>(L"Bitwise", L"Displayed on the button that contains a flyout for the bitwise functions in programmer mode.")},
	{L"bitShiftButton.Text", make_pair<wstring, wstring>(L"Bit Shift", L"Displayed on the button that contains a flyout for the bit shift functions in programmer mode.")},
	{L"trigShiftButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Inverse Function", L"Screen Reader prompt for the shift button in the trig flyout in scientific mode.")},
	{L"hypButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic function", L"Screen reader prompt for the Calculator button HYP in the scientific flyout keypad")},
	{L"secButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Secant", L"Screen reader prompt for the Calculator button sec in the scientific flyout keypad")},
	{L"secButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"U", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"sechButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Secant", L"Screen reader prompt for the Calculator button sech in the scientific flyout keypad")},
	{L"sechButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"U", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"invsecButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Arc Secant", L"Screen reader prompt for the Calculator button arc sec in the scientific flyout keypad")},
	{L"invsecButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"U", L"{Locked}The shortcut for the inverted sec button")},
	{L"invsechButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Arc Secant", L"Screen reader prompt for the Calculator button arc sec in the scientific flyout keypad")},
	{L"invsechButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"U", L"{Locked}The shortcut for the inverted sech button")},
	{L"cscButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Cosecant", L"Screen reader prompt for the Calculator button csc in the scientific flyout keypad")},
	{L"cscButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"I", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"cschButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Cosecant", L"Screen reader prompt for the Calculator button csch in the scientific flyout keypad")},
	{L"cschButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"I", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"invcscButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Arc Cosecant", L"Screen reader prompt for the Calculator button arc csc in the scientific flyout keypad")},
	{L"invcschButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Arc Cosecant", L"Screen reader prompt for the Calculator button arc csc in the scientific flyout keypad")},
	{L"invcschButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"I", L"{Locked}The shortcut for the inverted sech button")},
	{L"cotButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Cotangent", L"Screen reader prompt for the Calculator button cot in the scientific flyout keypad")},
	{L"cotButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"J", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"cothButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Cotangent", L"Screen reader prompt for the Calculator button coth in the scientific flyout keypad")},
	{L"cothButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"J", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"invcotButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Arc Cotangent", L"Screen reader prompt for the Calculator button arc cot in the scientific flyout keypad")},
	{L"invcotButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"J", L"{Locked}The shortcut for the inverted sec button")},
	{L"invcothButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Hyperbolic Arc Cotangent", L"Screen reader prompt for the Calculator button arc coth in the scientific flyout keypad")},
	{L"invcothButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlShiftChord", make_pair<wstring, wstring>(L"J", L"{Locked}The shortcut for the inverted sech button")},
	{L"floorButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Floor", L"Screen reader prompt for the Calculator button floor in the scientific flyout keypad")},
	{L"floorButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"[", L"{Locked}The shortcut for the inverted sech button")},
	{L"ceilButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Ceiling", L"Screen reader prompt for the Calculator button ceiling in the scientific flyout keypad")},
	{L"ceilButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"]", L"{Locked}The shortcut for the inverted sech button")},
	{L"randButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Random", L"Screen reader prompt for the Calculator button random in the scientific flyout keypad")},
	{L"randButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"R", L"{Locked}The shortcut for the inverted sech button")},
	{L"absButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Absolute Value", L"Screen reader prompt for the Calculator button abs in the scientific flyout keypad")},
	{L"absButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"|", L"{Locked}The shortcut for the inverted sech button")},
	{L"eulerButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Euler's number", L"Screen reader prompt for the Calculator button e in the scientific flyout keypad")},
	{L"eulerButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyShiftChord", make_pair<wstring, wstring>(L"E", L"{Locked}The shortcut for the inverted sech button")},
	{L"twoPowerXButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Two to the exponent", L"Screen reader prompt for the Calculator button 2^x in the scientific flyout keypad")},
	{L"twoPowerXButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"G", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"nandButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Nand", L"Screen reader prompt for the Calculator button nand in the scientific flyout keypad")},
	{L"nandButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L".", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"nandButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"Nand", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 nand' when the button is pressed. NAND is a mathematical operation on two binary values.")},
	{L"norButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Nor", L"Screen reader prompt for the Calculator button nor in the scientific flyout keypad")},
	{L"norButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"\\", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"norButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"Nor", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 nor' when the button is pressed. NAND is a mathematical operation on two binary values.")},
	{L"rolCarryButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Rotate on left with carry", L"Screen reader prompt for the Calculator button rol with carry in the scientific flyout keypad")},
	{L"rolCarryButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"<", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"rorCarryButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Rotate on right with carry", L"Screen reader prompt for the Calculator button ror with carry in the scientific flyout keypad")},
	{L"rorCarryButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L">", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"lshLogicalButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Left Shift", L"Screen reader prompt for the Calculator button lshLogical in the scientific flyout keypad")},
	{L"lshLogicalButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"<", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"lshLogicalButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"Left shift", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 left shift' when the button is pressed. NAND is a mathematical operation on two binary values.")},
	{L"rshLogicalButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Right Shift", L"Screen reader prompt for the Calculator button rshLogical in the scientific flyout keypad")},
	{L"rshLogicalButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L">", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"rshLogicalButton.[using:CalculatorApp.Controls]CalculatorButton.AuditoryFeedback", make_pair<wstring, wstring>(L"Right shift", L"Auditory feedback for Screen Reader users. Users will hear 'Display is 7 right shift' when the button is pressed. NAND is a mathematical operation on two binary values.")},
	{L"arithmeticShiftButton.Content", make_pair<wstring, wstring>(L"Arithmetic Shift", L"Label for a radio button that toggles arithmetic shift behavior for the shift operations.")},
	{L"logicalShiftButton.Content", make_pair<wstring, wstring>(L"Logical Shift", L"Label for a radio button that toggles logical shift behavior for the shift operations.")},
	{L"rotateCircularButton.Content", make_pair<wstring, wstring>(L"Rotate Circular Shift", L"Label for a radio button that toggles rotate circular behavior for the shift operations.")},
	{L"rotateCarryShiftButton.Content", make_pair<wstring, wstring>(L"Rotate Through Carry Circular Shift", L"Label for a radio button that toggles rotate circular with carry behavior for the shift operations.")},
	{L"cubeRootButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Cube root", L"Screen reader prompt for the cube root button on the scientific operator keypad")},
	{L"cubeRootButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"B", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"trigButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Trigonometry", L"Screen reader prompt for the square root button on the scientific operator keypad")},
	{L"funcButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Functions", L"Screen reader prompt for the square root button on the scientific operator keypad")},
	{L"bitwiseButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Bitwise", L"Screen reader prompt for the square root button on the scientific operator keypad")},
	{L"bitShiftButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Bitshift", L"Screen reader prompt for the square root button on the scientific operator keypad")},
	{L"ScientificOperatorPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Scientific Operator Panels", L"Screen reader prompt for the Scientific Operator Panels on the scientific operator keypad")},
	{L"ProgrammerOperatorPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Programmer Operator Panels", L"Screen reader prompt for the Programmer Operator Panels on the programmer operator keypad")},
	{L"MostSignificantBit", make_pair<wstring, wstring>(L"most significant bit", L"Used to describe the last bit of a binary number. Used in bit flip")},
	{L"GraphingCalculatorModeText", make_pair<wstring, wstring>(L"Graphing", L"Name of the Graphing mode of the Calculator app. Displayed in the navigation menu.")},
	{L"plotButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Enter", L"{Locked}This is the value from the VirtualKey enum that maps to this button")},
	{L"plotButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Plot", L"Screen reader prompt for the plot button on the graphing calculator operator keypad")},
	{L"xButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"X", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"yButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKey", make_pair<wstring, wstring>(L"Y", L"{Locked}This is the value that comes from the VirtualKey enum that represents the button. This value is not localized and must be one value that comes from the Windows::System::VirtualKey enum.")},
	{L"graphingPowerButton.[using:CalculatorApp.Common]KeyboardShortcutManager.Character", make_pair<wstring, wstring>(L"^", L"{Locked}This is the character that should trigger this button. Note that it is a character and not a key, so it does not come from the Windows::System::VirtualKey enum.")},
	{L"graphViewButton.[using:CalculatorApp.Common]KeyboardShortcutManager.VirtualKeyControlChord", make_pair<wstring, wstring>(L"Home", L"{Locked}This is the shortcut for the graph view button.")},
	{L"graphViewButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Refresh view automatically (Ctrl + 0)", L"This is the tool tip automation name for the Calculator graph view button.")},
	{L"graphViewButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Graph View", L"Screen reader prompt for the graph view button.")},
	{L"GraphViewAutomaticBestFitAnnouncement", make_pair<wstring, wstring>(L"Automatic Best Fit", L"Announcement used in Graphing Calculator when graph view button is clicked and automatic best fit is set")},
	{L"GraphViewManualAdjustmentAnnouncement", make_pair<wstring, wstring>(L"Manual Adjustment", L"Announcement used in Graphing Calculator when graph view button is clicked and manual adjustment is set")},
	{L"GridResetAnnouncement", make_pair<wstring, wstring>(L"Graph view has been reset", L"Announcement used in Graphing Calculator when graph view button is clicked and automatic best fit is set, resetting the graph")},
	{L"zoomInButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Zoom In (Ctrl + plus)", L"This is the tool tip automation name for the Calculator zoom in button.")},
	{L"zoomInButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Zoom In", L"Screen reader prompt for the zoom in button.")},
	{L"zoomOutButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Zoom Out (Ctrl + minus)", L"This is the tool tip automation name for the Calculator zoom out button.")},
	{L"zoomOutButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Zoom Out", L"Screen reader prompt for the zoom out button.")},
	{L"EquationTextBoxAddPanel.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Add Equation", L"Placeholder text for the equation input button")},
	{L"ShareActionErrorMessage", make_pair<wstring, wstring>(L"Unable to share at this time.", L"If there is an error in the sharing action will display a dialog with this text.")},
	{L"ShareActionErrorOk", make_pair<wstring, wstring>(L"OK", L"Used on the dismiss button of the share action error dialog.")},
	{L"ShareActionTitle", make_pair<wstring, wstring>(L"Look what I graphed with Windows Calculator", L"Sent as part of the shared content. The title for the share.")},
	{L"EquationsShareHeader", make_pair<wstring, wstring>(L"Equations", L"Header that appears over the equations section when sharing")},
	{L"VariablesShareHeader", make_pair<wstring, wstring>(L"Variables", L"Header that appears over the variables section when sharing")},
	{L"GraphImageAltText", make_pair<wstring, wstring>(L"Image of a graph with equations", L"Alt text for the graph image when output via Share")},
	{L"VaiablesHeader.Text", make_pair<wstring, wstring>(L"Variables", L"Header text for variables area")},
	{L"StepTextBlock.Text", make_pair<wstring, wstring>(L"Step", L"Label text for the step text box")},
	{L"MinTextBlock.Text", make_pair<wstring, wstring>(L"Min", L"Label text for the min text box")},
	{L"MaxTextBlock.Text", make_pair<wstring, wstring>(L"Max", L"Label text for the max text box")},
	{L"LineColorText.Text", make_pair<wstring, wstring>(L"Color", L"Label for the Line Color section of the style picker")},
	{L"StyleChooserBoxHeading.Text", make_pair<wstring, wstring>(L"Style", L"Label for the Line Style section of the style picker")},
	{L"KeyGraphFeaturesLabel.Text", make_pair<wstring, wstring>(L"Function analysis", L"Title for KeyGraphFeatures Control")},
	{L"KGFHorizontalAsymptotesNone", make_pair<wstring, wstring>(L"The function does not have any horizontal asymptotes.", L"Message displayed when the graph does not have any horizontal asymptotes")},
	{L"KGFInflectionPointsNone", make_pair<wstring, wstring>(L"The function does not have any inflection points.", L"Message displayed when the graph does not have any inflection points")},
	{L"KGFMaximaNone", make_pair<wstring, wstring>(L"The function does not have any maxima points.", L"Message displayed when the graph does not have any maxima")},
	{L"KGFMinimaNone", make_pair<wstring, wstring>(L"The function does not have any minima points.", L"Message displayed when the graph does not have any minima")},
	{L"KGFMonotonicityConstant", make_pair<wstring, wstring>(L"Constant", L"String describing constant monotonicity of a function")},
	{L"KGFMonotonicityDecreasing", make_pair<wstring, wstring>(L"Decreasing", L"String describing decreasing monotonicity of a function")},
	{L"KGFMonotonicityError", make_pair<wstring, wstring>(L"Unable to determine the monotonicity of the function.", L"Error displayed when monotonicity cannot be determined")},
	{L"KGFMonotonicityIncreasing", make_pair<wstring, wstring>(L"Increasing", L"String describing increasing monotonicity of a function")},
	{L"KGFMonotonicityUnknown", make_pair<wstring, wstring>(L"The monotonicity of the function is unknown.", L"Error displayed when monotonicity is unknown")},
	{L"KGFObliqueAsymptotesNone", make_pair<wstring, wstring>(L"The function does not have any oblique aysmptotes.", L"Message displayed when the graph does not have any oblique asymptotes")},
	{L"KGFParityError", make_pair<wstring, wstring>(L"Unable to determine the parity of the function.", L"Error displayed when parity is cannot be determined")},
	{L"KGFParityEven", make_pair<wstring, wstring>(L"The function is even.", L"Message displayed with the function parity is even")},
	{L"KGFParityNeither", make_pair<wstring, wstring>(L"The function is neither even nor odd.", L"Message displayed with the function parity is neither even nor odd")},
	{L"KGFParityOdd", make_pair<wstring, wstring>(L"The function is odd.", L"Message displayed with the function parity is odd")},
	{L"KGFParityUnknown", make_pair<wstring, wstring>(L"The function parity is unknown.", L"Error displayed when parity is unknown")},
	{L"KGFPeriodicityError", make_pair<wstring, wstring>(L"Periodicity is not supported for this function.", L"Error displayed when periodicity is not supported")},
	{L"KGFPeriodicityNotPeriodic", make_pair<wstring, wstring>(L"The function is not periodic.", L"Message displayed with the function periodicity is not periodic")},
	{L"KGFPeriodicityUnknown", make_pair<wstring, wstring>(L"The function periodicity is unknown.", L"Message displayed with the function periodicity is unknown")},
	{L"KGFTooComplexFeaturesError", make_pair<wstring, wstring>(L"These features are too complex for Calculator to calculate:", L"Error displayed when analysis features cannot be calculated")},
	{L"KGFVerticalAsymptotesNone", make_pair<wstring, wstring>(L"The function does not have any vertical asymptotes.", L"Message displayed when the graph does not have any vertical asymptotes")},
	{L"KGFXInterceptNone", make_pair<wstring, wstring>(L"The function does not have any x-intercepts.", L"Message displayed when the graph does not have any x-intercepts")},
	{L"KGFYInterceptNone", make_pair<wstring, wstring>(L"The function does not have any y-intercepts.", L"Message displayed when the graph does not have any y-intercepts")},
	{L"Domain", make_pair<wstring, wstring>(L"Domain", L"Title for KeyGraphFeatures Domain Property")},
	{L"HorizontalAsymptotes", make_pair<wstring, wstring>(L"Horizontal Asymptotes", L"Title for KeyGraphFeatures Horizontal Aysmptotes Property")},
	{L"InflectionPoints", make_pair<wstring, wstring>(L"Inflection Points", L"Title for KeyGraphFeatures Inflection Points Property")},
	{L"KGFAnalysisNotSupported", make_pair<wstring, wstring>(L"Analysis is not supported for this function.", L"Error displayed when graph analysis is not supported or had an error.")},
	{L"KGFVariableIsNotX", make_pair<wstring, wstring>(L"Analysis is only supported for functions in the f(x) format. Example: y=x", L"Error displayed when graph analysis detects the function format is not f(x).")},
	{L"Maxima", make_pair<wstring, wstring>(L"Maxima", L"Title for KeyGraphFeatures Maxima Property")},
	{L"Minima", make_pair<wstring, wstring>(L"Minima", L"Title for KeyGraphFeatures Minima Property")},
	{L"Monotonicity", make_pair<wstring, wstring>(L"Monotonicity", L"Title for KeyGraphFeatures Monotonicity Property")},
	{L"ObliqueAsymptotes", make_pair<wstring, wstring>(L"Oblique Asymptotes", L"Title for KeyGraphFeatures Oblique Asymptotes Property")},
	{L"Parity", make_pair<wstring, wstring>(L"Parity", L"Title for KeyGraphFeatures Parity Property")},
	{L"Periodicity", make_pair<wstring, wstring>(L"Period", L"Title for KeyGraphFeatures Periodicity Property. The period of a mathematical function is the smallest interval in its input values such that its output values repeat every such interval.")},
	{L"Range", make_pair<wstring, wstring>(L"Range", L"Title for KeyGraphFeatures Range Property")},
	{L"VerticalAsymptotes", make_pair<wstring, wstring>(L"Vertical Asymptotes", L"Title for KeyGraphFeatures Vertical Asymptotes Property")},
	{L"XIntercept", make_pair<wstring, wstring>(L"X-Intercept", L"Title for KeyGraphFeatures XIntercept Property")},
	{L"YIntercept", make_pair<wstring, wstring>(L"Y-Intercept", L"Title for KeyGraphFeatures YIntercept Property")},
	{L"KGFAnalysisCouldNotBePerformed", make_pair<wstring, wstring>(L"Analysis could not be performed for the function.", L"")},
	{L"KGFDomainNone", make_pair<wstring, wstring>(L"Unable to calculate the domain for this function.", L"Error displayed when Domain is not returned from the analyzer.")},
	{L"KGFRangeNone", make_pair<wstring, wstring>(L"Unable to calculate the range for this function.", L"Error displayed when Range is not returned from the analyzer.")},
	{L"Overflow", make_pair<wstring, wstring>(L"Overflow (the number is too large)", L"Error that occurs during graphing when the number is too large. To see this error, assign a large number to variable a, then keep doing 'a:=a*a' until it happens.")},
	{L"RequireRadiansMode", make_pair<wstring, wstring>(L"Radians mode is required to graph this equation.", L"Error that occurs during graphing when radians is required.")},
	{L"TooComplexToSolve", make_pair<wstring, wstring>(L"This function is too complex to graph", L"Error that occurs during graphing when the equation is too complex.")},
	{L"RequireDegreesMode", make_pair<wstring, wstring>(L"Degrees mode is required to graph this function", L"Error that occurs during graphing when degrees is required")},
	{L"FactorialInvalidArgument", make_pair<wstring, wstring>(L"The factorial function has an invalid argument", L"Error that occurs during graphing when a factorial function has an invalid argument.")},
	{L"FactorialCannotPerformOnLargeNumber", make_pair<wstring, wstring>(L"The factorial function has an argument that is too large to graph", L"Error that occurs during graphing when a factorial has a large n")},
	{L"ModuloCannotPerformOnFloat", make_pair<wstring, wstring>(L"Modulo can only be used with whole numbers", L"Error that occurs during graphing when modulo is used with a float.")},
	{L"EquationHasNoSolution", make_pair<wstring, wstring>(L"The equation has no solution", L"Error that occurs during graphing when the equation has no solution.")},
	{L"DivideByZero", make_pair<wstring, wstring>(L"Cannot divide by zero", L"Error that occurs during graphing when a divison by zero occurs.")},
	{L"MutuallyExclusiveConditions", make_pair<wstring, wstring>(L"The equation contains logical conditions that are mutually exclusive", L"Error that occurs during graphing when mutually exclusive conditions are used.")},
	{L"OutOfDomain", make_pair<wstring, wstring>(L"Equation is out of domain", L"Error that occurs during graphing when the equation is out of domain.")},
	{L"GE_NotSupported", make_pair<wstring, wstring>(L"Graphing this equation is not supported", L"Error that occurs during graphing when the equation is not supported.")},
	{L"ParenthesisMismatch", make_pair<wstring, wstring>(L"The equation is missing an opening parenthesis", L"Error that occurs during graphing when the equation is missing a (")},
	{L"UnmatchedParenthesis", make_pair<wstring, wstring>(L"The equation is missing a closing parenthesis", L"Error that occurs during graphing when the equation is missing a )")},
	{L"TooManyDecimalPoints", make_pair<wstring, wstring>(L"There are too many decimal points in a number", L"Error that occurs during graphing when a number has too many decimals. Ex: 1.2.3")},
	{L"DecimalPointWithoutDigits", make_pair<wstring, wstring>(L"A decimal point is missing digits", L"Error that occurs during graphing with a decimal point without digits")},
	{L"UnexpectedEndOfExpression", make_pair<wstring, wstring>(L"Unexpected end of expression", L"Error that occurs during graphing when the expression ends unexpectedly. Ex: 3-4*")},
	{L"UnexpectedToken", make_pair<wstring, wstring>(L"Unexpected characters in the expression", L"Error that occurs during graphing when there is an unexpected token.")},
	{L"InvalidToken", make_pair<wstring, wstring>(L"Invalid characters in the expression", L"Error that occurs during graphing when there is an invalid token.")},
	{L"TooManyEquals", make_pair<wstring, wstring>(L"There are too many equal signs", L"Error that occurs during graphing when there are too many equals.")},
	{L"EqualWithoutGraphVariable", make_pair<wstring, wstring>(L"The function must contain at least one x or y variable", L"Error that occurs during graphing when the equation is missing x or y.")},
	{L"InvalidEquationSyntax", make_pair<wstring, wstring>(L"Invalid expression", L"Error that occurs during graphing when an invalid syntax is used.")},
	{L"EmptyExpression", make_pair<wstring, wstring>(L"The expression is empty", L"Error that occurs during graphing when the expression is empty")},
	{L"EqualWithoutEquation", make_pair<wstring, wstring>(L"Equal was used without an equation", L"Error that occurs during graphing when equal is used without an equation. Ex: sin(x=y)")},
	{L"ExpectParenthesisAfterFunctionName", make_pair<wstring, wstring>(L"Parenthesis missing after function name", L"Error that occurs during graphing when parenthesis are missing after a function.")},
	{L"IncorrectNumParameter", make_pair<wstring, wstring>(L"A mathematical operation has the incorrect number of parameters", L"Error that occurs during graphing when a function has the wrong number of parameters")},
	{L"InvalidVariableNameFormat", make_pair<wstring, wstring>(L"A variable name is invalid", L"Error that occurs during graphing when a variable name is invalid.")},
	{L"BracketMismatch", make_pair<wstring, wstring>(L"The equation is missing an opening bracket", L"Error that occurs during graphing when a { is missing")},
	{L"UnmatchedBracket", make_pair<wstring, wstring>(L"The equation is missing a closing bracket", L"Error that occurs during graphing when a } is missing.")},
	{L"CannotUseIInReal", make_pair<wstring, wstring>(L"'i' and 'I' cannot be used as variable names", L"Error that occurs during graphing when i or I is used.")},
	{L"GeneralError", make_pair<wstring, wstring>(L"The equation could not be graphed", L"General error that occurs during graphing.")},
	{L"InvalidNumberDigit", make_pair<wstring, wstring>(L"The digit could not be resolved for the given base", L"Error that occurs during graphing when trying to use bases incorrect. Ex: base(2,1020).")},
	{L"InvalidNumberBase", make_pair<wstring, wstring>(L"The base must be greater than 2 and less than 36", L"Error that occurs during graphing when the base is out of range.")},
	{L"InvalidVariableSpecification", make_pair<wstring, wstring>(L"A mathematical operation requires one of its paramaters to be a variable", L"Error that occurs during graphing when a function requires a variable in a particular position. Ex: 2nd argument of deriv.")},
	{L"ExpectingLogicalOperands", make_pair<wstring, wstring>(L"Equation is mixing logical and scalar operands", L"Error that occurs during graphing when operands are mixed. Such as true and 1.")},
	{L"CannotUseIndexVarInOpLimits", make_pair<wstring, wstring>(L"x or y cannot be used in the upper or lower limits", L"Error that occurs during graphing when x or y is used in integral upper limits.")},
	{L"CannotUseIndexVarInLimPoint", make_pair<wstring, wstring>(L"x or y cannot be used in the limit point", L"Error that occurs during graphing when x or y is used in the limit point.")},
	{L"CannotUseComplexInfinityInReal", make_pair<wstring, wstring>(L"Cannot use complex infinity", L"Error that occurs during graphing when complex infinity is used")},
	{L"CannotUseIInInequalitySolving", make_pair<wstring, wstring>(L"Cannot use complex numbers in inequalities", L"Error that occurs during graphing when complex numbers are used in inequalities.")},
	{L"equationAnalysisBack.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Back to function list", L"This is the tooltip for the back button in the equation analysis page in the graphing calculator")},
	{L"equationAnalysisBack.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Back to function list", L"This is the automation name for the back button in the equation analysis page in the graphing calculator")},
	{L"functionAnalysisButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Analyze function", L"This is the tooltip for the analyze function button")},
	{L"functionAnalysisButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Analyze function", L"This is the automation name for the analyze function button")},
	{L"functionAnalysisMenuItem", make_pair<wstring, wstring>(L"Analyze function", L"This is the text for the for the analyze function context menu command")},
	{L"removeButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Remove equation", L"This is the tooltip for the graphing calculator remove equation buttons")},
	{L"removeButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Remove equation", L"This is the automation name for the graphing calculator remove equation buttons")},
	{L"removeMenuItem", make_pair<wstring, wstring>(L"Remove equation", L"This is the text for the for the remove equation context menu command")},
	{L"shareButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Share", L"This is the automation name for the graphing calculator share button.")},
	{L"shareButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Share", L"This is the tooltip for the graphing calculator share button.")},
	{L"colorChooserButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Change equation style", L"This is the tooltip for the graphing calculator equation style button")},
	{L"colorChooserButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Change equation style", L"This is the automation name for the graphing calculator equation style button")},
	{L"colorChooserMenuItem", make_pair<wstring, wstring>(L"Change equation style", L"This is the text for the for the equation style context menu command")},
	{L"showEquationButtonToolTip", make_pair<wstring, wstring>(L"Show equation", L"This is the tooltip/automation name shown when visibility is set to hidden in the graphing calculator.")},
	{L"hideEquationButtonToolTip", make_pair<wstring, wstring>(L"Hide equation", L"This is the tooltip/automation name shown when visibility is set to visible in the graphing calculator.")},
	{L"showEquationButtonAutomationName", make_pair<wstring, wstring>(L"Show equation %1", L"{Locked='%1'}, This is the tooltip/automation name shown when visibility is set to hidden in the graphing calculator. %1 is the equation number.")},
	{L"hideEquationButtonAutomationName", make_pair<wstring, wstring>(L"Hide equation %1", L"{Locked='%1'}, This is the tooltip/automation name shown when visibility is set to visible in the graphing calculator. %1 is the equation number.")},
	{L"disableTracingButtonToolTip", make_pair<wstring, wstring>(L"Stop tracing", L"This is the tooltip/automation name for the graphing calculator stop tracing button")},
	{L"enableTracingButtonToolTip", make_pair<wstring, wstring>(L"Start tracing", L"This is the tooltip/automation name for the graphing calculator start tracing button")},
	{L"graphAutomationName", make_pair<wstring, wstring>(L"Graph viewing window, x-axis bounded by %1 and %2, y-axis bounded by %3 and %4, displaying %5 equations", L"{Locked='%1','%2', '%3', '%4', '%5'}. ")},
	{L"sliderOptionsButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Configure slider", L"This is the tooltip text for the slider options button in Graphing Calculator")},
	{L"sliderOptionsButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Configure slider", L"This is the automation name text for the slider options button in Graphing Calculator")},
	{L"GraphSwitchToEquationMode", make_pair<wstring, wstring>(L"Switch to equation mode", L"Used in Graphing Calculator to switch the view to the equation mode")},
	{L"GraphSwitchToGraphMode", make_pair<wstring, wstring>(L"Switch to graph mode", L"Used in Graphing Calculator to switch the view to the graph mode")},
	{L"SwitchModeToggleButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Switch to equation mode", L"Used in Graphing Calculator to switch the view to the equation mode")},
	{L"GraphSwitchedToEquationModeAnnouncement", make_pair<wstring, wstring>(L"Current mode is equation mode", L"Announcement used in Graphing Calculator when switching to the equation mode")},
	{L"GraphSwitchedToGraphModeAnnouncement", make_pair<wstring, wstring>(L"Current mode is graph mode", L"Announcement used in Graphing Calculator when switching to the graph mode")},
	{L"GridHeading.Text", make_pair<wstring, wstring>(L"Window", L"Heading for window extents on the settings ")},
	{L"TrigModeDegrees.Content", make_pair<wstring, wstring>(L"Degrees", L"Degrees mode on settings page")},
	{L"TrigModeGradians.Content", make_pair<wstring, wstring>(L"Gradians", L"Gradian mode on settings page")},
	{L"TrigModeRadians.Content", make_pair<wstring, wstring>(L"Radians", L"Radians mode on settings page")},
	{L"UnitsHeading.Text", make_pair<wstring, wstring>(L"Units", L"Heading for Unit's on the settings")},
	{L"ResetViewButton.Content", make_pair<wstring, wstring>(L"Reset view", L"Hyperlink button to reset the view of the graph")},
	{L"GraphSettingsXMax.Header", make_pair<wstring, wstring>(L"X-Max", L"X maximum value header")},
	{L"GraphSettingsXMin.Header", make_pair<wstring, wstring>(L"X-Min", L"X minimum value header")},
	{L"GraphSettingsYMax.Header", make_pair<wstring, wstring>(L"Y-Max", L"Y Maximum value header")},
	{L"GraphSettingsYMin.Header", make_pair<wstring, wstring>(L"Y-Min", L"Y minimum value header")},
	{L"graphSettingsButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Graph options", L"This is the tooltip text for the graph options button in Graphing Calculator")},
	{L"graphSettingsButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Graph options", L"This is the automation name text for the graph options button in Graphing Calculator")},
	{L"GraphOptionsHeading.Text", make_pair<wstring, wstring>(L"Graph Options", L"Heading for the Graph Options flyout in Graphing mode.")},
	{L"VariableAreaSettings.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable options", L"Screen reader prompt for the variable settings toggle button")},
	{L"VariableAreaSettings.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip", make_pair<wstring, wstring>(L"Toggle variable options", L"Tool tip for the variable settings toggle button")},
	{L"LineThicknessBoxHeading.Text", make_pair<wstring, wstring>(L"Line Thickness", L"Heading for the Graph Options flyout in Graphing mode.")},
	{L"LineOptionsHeading.Text", make_pair<wstring, wstring>(L"Line Options", L"Heading for the equation style flyout in Graphing mode.")},
	{L"SmallLineWidthAutomationName", make_pair<wstring, wstring>(L"Small Line Width", L"Automation name for line width setting")},
	{L"MediumLineWidthAutomationName", make_pair<wstring, wstring>(L"Medium Line Width", L"Automation name for line width setting")},
	{L"LargeLineWidthAutomationName", make_pair<wstring, wstring>(L"Large Line Width", L"Automation name for line width setting")},
	{L"ExtraLargeLineWidthAutomationName", make_pair<wstring, wstring>(L"Extra Large Line Width", L"Automation name for line width setting")},
	{L"mathRichEditBox.PlaceholderText", make_pair<wstring, wstring>(L"Enter an expression", L"this is the placeholder text used by the textbox to enter an equation")},
	{L"GraphCopyMenuItem.Text", make_pair<wstring, wstring>(L"Copy", L"Copy menu item for the graph context menu")},
	{L"cutEquationMenuItem.Text", make_pair<wstring, wstring>(L"Cut", L"Cut menu item from the Equation TextBox")},
	{L"copyEquationMenuItem.Text", make_pair<wstring, wstring>(L"Copy", L"Copy menu item from the Equation TextBox")},
	{L"pasteEquationMenuItem.Text", make_pair<wstring, wstring>(L"Paste", L"Paste menu item from the Equation TextBox")},
	{L"undoEquationMenuItem.Text", make_pair<wstring, wstring>(L"Undo", L"Undo menu item from the Equation TextBox")},
	{L"selectAllEquationMenuItem.Text", make_pair<wstring, wstring>(L"Select All", L"Select all menu item from the Equation TextBox")},
	{L"EquationInputButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Function Input List Item", L"The automation name for the Equation Input ListView item that is shown when Calculator is in graphing mode.")},
	{L"EquationInputList.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Function Input List", L"The automation name for the Equation Input ListView that is shown when Calculator is in graphing mode.")},
	{L"EquationInputPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Function Input Panel", L"The automation name for the Equation Input StackPanel that is shown when Calculator is in graphing mode.")},
	{L"VariableStackPanel.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable Panel", L"The automation name for the Variable StackPanel that is shown when Calculator is in graphing mode.")},
	{L"VariableListView.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable List", L"The automation name for the Variable ListView that is shown when Calculator is in graphing mode.")},
	{L"VariableListViewItem", make_pair<wstring, wstring>(L"Variable %1 List Item", L"The automation name for the Variable ListViewItem that is shown when Calculator is in graphing mode.")},
	{L"VariableValueTextBox.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable Value Textbox", L"The automation name for the Variable Value Textbox that is shown when Calculator is in graphing mode.")},
	{L"VariableValueSlider.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable Value Slider", L"The automation name for the Variable Value Slider that is shown when Calculator is in graphing mode.")},
	{L"VariableMinTextBox.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable Minimum Value Textbox", L"The automation name for the Variable Min Value Textbox that is shown when Calculator is in graphing mode.")},
	{L"VariableStepTextBox.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable Step Value Textbox", L"The automation name for the Variable Step Textbox that is shown when Calculator is in graphing mode.")},
	{L"VariableMaxTextBox.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Variable Maximum Value Textbox", L"The automation name for the Variable Max Value Textbox that is shown when Calculator is in graphing mode.")},
	{L"solidLineStyleAutomationName", make_pair<wstring, wstring>(L"Solid line style", L"Name of the solid line style for a graphed equation")},
	{L"dotLineStyleAutomationName", make_pair<wstring, wstring>(L"Dot line style", L"Name of the dotted line style for a graphed equation")},
	{L"dashLineStyleAutomationName", make_pair<wstring, wstring>(L"Dash line style", L"Name of the dashed line style for a graphed equation")},
	{L"equationColor1AutomationName", make_pair<wstring, wstring>(L"Navy Blue", L"Name of color in the color picker")},
	{L"equationColor2AutomationName", make_pair<wstring, wstring>(L"Seafoam", L"Name of color in the color picker")},
	{L"equationColor3AutomationName", make_pair<wstring, wstring>(L"Violet", L"Name of color in the color picker")},
	{L"equationColor4AutomationName", make_pair<wstring, wstring>(L"Green", L"Name of color in the color picker")},
	{L"equationColor5AutomationName", make_pair<wstring, wstring>(L"Mint Green", L"Name of color in the color picker")},
	{L"equationColor6AutomationName", make_pair<wstring, wstring>(L"Dark Green", L"Name of color in the color picker")},
	{L"equationColor7AutomationName", make_pair<wstring, wstring>(L"Charcoal", L"Name of color in the color picker")},
	{L"equationColor8AutomationName", make_pair<wstring, wstring>(L"Red", L"Name of color in the color picker")},
	{L"equationColor9AutomationName", make_pair<wstring, wstring>(L"Plum Light", L"Name of color in the color picker")},
	{L"equationColor10AutomationName", make_pair<wstring, wstring>(L"Magenta", L"Name of color in the color picker")},
	{L"equationColor11AutomationName", make_pair<wstring, wstring>(L"Yellow Gold", L"Name of color in the color picker")},
	{L"equationColor12AutomationName", make_pair<wstring, wstring>(L"Orange Bright", L"Name of color in the color picker")},
	{L"equationColor13AutomationName", make_pair<wstring, wstring>(L"Brown", L"Name of color in the color picker")},
	{L"equationColor14BlackAutomationName", make_pair<wstring, wstring>(L"Black", L"Name of color in the color picker")},
	{L"equationColor14WhiteAutomationName", make_pair<wstring, wstring>(L"White", L"Name of color in the color picker")},
	{L"equationHighContrastColor1AutomationName", make_pair<wstring, wstring>(L"Color 1", L"Name of color in the color picker")},
	{L"equationHighContrastColor2AutomationName", make_pair<wstring, wstring>(L"Color 2", L"Name of color in the color picker")},
	{L"equationHighContrastColor3AutomationName", make_pair<wstring, wstring>(L"Color 3", L"Name of color in the color picker")},
	{L"equationHighContrastColor4AutomationName", make_pair<wstring, wstring>(L"Color 4", L"Name of color in the color picker")},
	{L"GraphThemeHeading.Text", make_pair<wstring, wstring>(L"Graph Theme", L"Graph settings heading for the theme options")},
	{L"AlwaysLightTheme.Content", make_pair<wstring, wstring>(L"Always light", L"Graph settings option to set graph to light theme")},
	{L"MatchAppTheme.Content", make_pair<wstring, wstring>(L"Match app theme", L"Graph settings option to set graph to match the app theme")},
	{L"GraphThemeHeading.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Theme", L"This is the automation name text for the Graph settings heading for the theme options")},
	{L"AlwaysLightTheme.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Always light", L"This is the automation name text for the Graph settings option to set graph to light theme")},
	{L"MatchAppTheme.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Match app theme", L"This is the automation name text for the Graph settings option to set graph to match the app theme")},
	{L"FunctionRemovedAnnouncement", make_pair<wstring, wstring>(L"Function removed", L"Announcement used in Graphing Calculator when a function is removed from the function list")},
	{L"KGFEquationTextBox.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Function Analysis Equation Box", L"This is the automation name text for the equation box in the function analysis panel")},
	{L"graphingEqualButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Equals", L"Screen reader prompt for the equal button on the graphing calculator operator keypad")},
	{L"lessThanFlyoutButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Less than", L"Screen reader prompt for the Less than button")},
	{L"lessThanOrEqualFlyoutButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Less than or equal", L"Screen reader prompt for the Less than or equal button")},
	{L"equalsFlyoutButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Equal", L"Screen reader prompt for the Equal button")},
	{L"greaterThanOrEqualFlyoutButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Greater than or equal", L"Screen reader prompt for the Greater than or equal button")},
	{L"greaterThanFlyoutButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Greater than", L"Screen reader prompt for the Greater than button")},
	{L"xButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"X", L"Screen reader prompt for the X button on the graphing calculator operator keypad")},
	{L"yButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Y", L"Screen reader prompt for the Y button on the graphing calculator operator keypad")},
	{L"submitButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Submit", L"Screen reader prompt for the submit button on the graphing calculator operator keypad")},
	{L"FunctionAnalysisGrid.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Function Anaylsis", L"Screen reader prompt for the function analysis grid")},
	{L"GraphSettingsGrid.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name", make_pair<wstring, wstring>(L"Graph Options", L"Screen reader prompt for the graph options panel")},
	{L"DockPanel_HistoryMemoryLists", make_pair<wstring, wstring>(L"History and Memory lists", L"Automation name for the group of controls for history and memory lists.")},
	{L"DockPanel_MemoryList", make_pair<wstring, wstring>(L"Memory list", L"Automation name for the group of controls for memory list.")},
	{L"Format_HistorySlotCleared", make_pair<wstring, wstring>(L"History slot %1 cleared", L"{Locked='%1'} Formatting string for a Narrator announcement when the user clears a history slot. The %1 is the index of the history slot. For example, users might hear 'History slot 2 cleared'.")},
	{L"CalcAlwaysOnTop", make_pair<wstring, wstring>(L"Calculator always on top", L"Announcement to indicate calculator window is always shown on top.")},
	{L"CalcBackToFullView", make_pair<wstring, wstring>(L"Calculator back to full view", L"Announcement to indicate calculator window is now back to full view.")},
	{L"arithmeticShiftButtonSelected", make_pair<wstring, wstring>(L"Arithmetic Shift selected", L"Label for a radio button that toggles arithmetic shift behavior for the shift operations.")},
	{L"logicalShiftButtonSelected", make_pair<wstring, wstring>(L"Logical Shift selected", L"Label for a radio button that toggles logical shift behavior for the shift operations.")},
	{L"rotateCircularButtonSelected", make_pair<wstring, wstring>(L"Rotate Circular Shift selected", L"Label for a radio button that toggles rotate circular behavior for the shift operations.")},
	{L"rotateCarryShiftButtonSelected", make_pair<wstring, wstring>(L"Rotate Through Carry Circular Shift selected", L"Label for a radio button that toggles rotate circular with carry behavior for the shift operations.")}
};

std::map<wstring, pair<wstring, wstring>> ce_name_value_comment_map = {
	{L"10", make_pair<wstring, wstring>(L"Rsh", L"{Locked}The string that represents the function")},
	{L"100", make_pair<wstring, wstring>(L"Invalid input", L"Error message shown when the input makes a function fail, like log(-1)")},
	{L"101", make_pair<wstring, wstring>(L"Result is undefined", L"Error message shown when there's no possible value for a function.")},
	{L"105", make_pair<wstring, wstring>(L"Not enough memory", L"Error message shown when we run out of memory during a calculation.")},
	{L"107", make_pair<wstring, wstring>(L"Overflow", L"Error message shown when there's an overflow during the calculation.")},
	{L"108", make_pair<wstring, wstring>(L"Result not defined", L"Same as 101")},
	{L"11", make_pair<wstring, wstring>(L"÷", L"{Locked}The string that represents the function")},
	{L"118", make_pair<wstring, wstring>(L"Result not defined", L"Same 101")},
	{L"119", make_pair<wstring, wstring>(L"Overflow", L"Same as 107")},
	{L"12", make_pair<wstring, wstring>(L"×", L"{Locked}The string that represents the function")},
	{L"120", make_pair<wstring, wstring>(L"Overflow", L"Same 107")},
	{L"13", make_pair<wstring, wstring>(L"+", L"{Locked}The string that represents the function")},
	{L"14", make_pair<wstring, wstring>(L"-", L"{Locked}The string that represents the function")},
	{L"15", make_pair<wstring, wstring>(L"Mod", L"{Locked}The string that represents the function")},
	{L"16", make_pair<wstring, wstring>(L"yroot", L"{Locked}The string that represents the function")},
	{L"17", make_pair<wstring, wstring>(L"^", L"{Locked}The string that represents the function")},
	{L"18", make_pair<wstring, wstring>(L"Int", L"{Locked}The string that represents the function")},
	{L"19", make_pair<wstring, wstring>(L"RoL", L"{Locked}The string that represents the function")},
	{L"2", make_pair<wstring, wstring>(L"CE", L"{Locked}The string that represents the function")},
	{L"20", make_pair<wstring, wstring>(L"RoR", L"{Locked}The string that represents the function")},
	{L"21", make_pair<wstring, wstring>(L"NOT", L"{Locked}The string that represents the function")},
	{L"22", make_pair<wstring, wstring>(L"sin", L"{Locked}The string that represents the function")},
	{L"23", make_pair<wstring, wstring>(L"cis", L"{Locked}The string that represents the function")},
	{L"24", make_pair<wstring, wstring>(L"tan", L"{Locked}The string that represents the function")},
	{L"25", make_pair<wstring, wstring>(L"sinh", L"{Locked}The string that represents the function")},
	{L"26", make_pair<wstring, wstring>(L"cosh", L"{Locked}The string that represents the function")},
	{L"27", make_pair<wstring, wstring>(L"tanh", L"{Locked}The string that represents the function")},
	{L"28", make_pair<wstring, wstring>(L"ln", L"{Locked}The string that represents the function")},
	{L"29", make_pair<wstring, wstring>(L"log", L"{Locked}The string that represents the function")},
	{L"30", make_pair<wstring, wstring>(L"√", L"{Locked}The string that represents the function")},
	{L"35", make_pair<wstring, wstring>(L"dms", L"{Locked}The string that represents the function")},
	{L"37", make_pair<wstring, wstring>(L"10^", L"{Locked}The string that represents the function")},
	{L"38", make_pair<wstring, wstring>(L"%", L"{Locked}The string that represents the function")},
	{L"4", make_pair<wstring, wstring>(L".", L"{Locked}The string that represents the function")},
	{L"40", make_pair<wstring, wstring>(L"Pi", L"{Locked}The string that represents the function")},
	{L"41", make_pair<wstring, wstring>(L"=", L"{Locked}The string that represents the function")},
	{L"47", make_pair<wstring, wstring>(L"Exp", L"{Locked}The string that represents the function")},
	{L"48", make_pair<wstring, wstring>(L"(", L"{Locked}The string that represents the function")},
	{L"49", make_pair<wstring, wstring>(L")", L"{Locked}The string that represents the function")},
	{L"6", make_pair<wstring, wstring>(L"AND", L"{Locked}The string that represents the function")},
	{L"66", make_pair<wstring, wstring>(L"frac", L"{Locked}The string that represents the function")},
	{L"67", make_pair<wstring, wstring>(L"sin₀", L"{Locked}The string that represents the function")},
	{L"68", make_pair<wstring, wstring>(L"cos₀", L"{Locked}The string that represents the function")},
	{L"69", make_pair<wstring, wstring>(L"tan₀", L"{Locked}The string that represents the function")},
	{L"7", make_pair<wstring, wstring>(L"OR", L"{Locked}The string that represents the function")},
	{L"70", make_pair<wstring, wstring>(L"sin₀⁻¹", L"{Locked}The string that represents the function")},
	{L"71", make_pair<wstring, wstring>(L"cos₀⁻¹", L"{Locked}The string that represents the function")},
	{L"72", make_pair<wstring, wstring>(L"tan₀⁻¹", L"{Locked}The string that represents the function")},
	{L"73", make_pair<wstring, wstring>(L"sinᵣ", L"{Locked}The string that represents the function")},
	{L"74", make_pair<wstring, wstring>(L"cosᵣ", L"{Locked}The string that represents the function")},
	{L"75", make_pair<wstring, wstring>(L"tanᵣ", L"{Locked}The string that represents the function")},
	{L"76", make_pair<wstring, wstring>(L"sinᵣ⁻¹", L"{Locked}The string that represents the function")},
	{L"77", make_pair<wstring, wstring>(L"cosᵣ⁻¹", L"{Locked}The string that represents the function")},
	{L"78", make_pair<wstring, wstring>(L"tanᵣ⁻¹", L"{Locked}The string that represents the function")},
	{L"79", make_pair<wstring, wstring>(L"sin₉", L"{Locked}The string that represents the function")},
	{L"8", make_pair<wstring, wstring>(L"XOR", L"{Locked}The string that represents the function")},
	{L"80", make_pair<wstring, wstring>(L"cos₉", L"{Locked}The string that represents the function")},
	{L"81", make_pair<wstring, wstring>(L"tan₉", L"{Locked}The string that represents the function")},
	{L"82", make_pair<wstring, wstring>(L"sin₉⁻¹", L"{Locked}The string that represents the function")},
	{L"83", make_pair<wstring, wstring>(L"cos₉⁻¹", L"{Locked}The string that represents the function")},
	{L"84", make_pair<wstring, wstring>(L"tan₉⁻¹", L"{Locked}The string that represents the function")},
	{L"85", make_pair<wstring, wstring>(L"sinh⁻¹", L"{Locked}The string that represents the function")},
	{L"86", make_pair<wstring, wstring>(L"cosh⁻¹", L"{Locked}The string that represents the function")},
	{L"87", make_pair<wstring, wstring>(L"tanh⁻¹", L"{Locked}The string that represents the function")},
	{L"88", make_pair<wstring, wstring>(L"e^", L"{Locked}The string that represents the function")},
	{L"89", make_pair<wstring, wstring>(L"10^", L"{Locked}The string that represents the function")},
	{L"9", make_pair<wstring, wstring>(L"Lsh", L"{Locked}The string that represents the function")},
	{L"90", make_pair<wstring, wstring>(L"√", L"{Locked}The string that represents the function")},
	{L"91", make_pair<wstring, wstring>(L"sqr", L"{Locked}The string that represents the function")},
	{L"92", make_pair<wstring, wstring>(L"cube", L"{Locked}The string that represents the function")},
	{L"94", make_pair<wstring, wstring>(L"fact", L"{Locked}The string that represents the function")},
	{L"95", make_pair<wstring, wstring>(L"1/", L"{Locked}The string that represents the function")},
	{L"96", make_pair<wstring, wstring>(L"degrees", L"{Locked}The string that represents the function")},
	{L"97", make_pair<wstring, wstring>(L"negate", L"{Locked}The string that represents the function")},
	{L"99", make_pair<wstring, wstring>(L"Cannot divide by zero", L"Error string shown when a divide by zero condition happens during the calculation")},
	{L"SecDeg", make_pair<wstring, wstring>(L"sec₀", L"{Locked}The string that represents the function")},
	{L"SecRad", make_pair<wstring, wstring>(L"secᵣ", L"{Locked}The string that represents the function")},
	{L"SecGrad", make_pair<wstring, wstring>(L"sec₉", L"{Locked}The string that represents the function")},
	{L"InverseSecDeg", make_pair<wstring, wstring>(L"sec₀⁻¹", L"{Locked}The string that represents the function")},
	{L"InverseSecRad", make_pair<wstring, wstring>(L"secᵣ⁻¹", L"{Locked}The string that represents the function")},
	{L"InverseSecGrad", make_pair<wstring, wstring>(L"sec₉⁻¹", L"{Locked}The string that represents the function")},
	{L"CscDeg", make_pair<wstring, wstring>(L"csc₀", L"{Locked}The string that represents the function")},
	{L"CscRad", make_pair<wstring, wstring>(L"cscᵣ", L"{Locked}The string that represents the function")},
	{L"CscGrad", make_pair<wstring, wstring>(L"csc₉", L"{Locked}The string that represents the function")},
	{L"InverseCscDeg", make_pair<wstring, wstring>(L"csc₀⁻¹", L"{Locked}The string that represents the function")},
	{L"InverseCscRad", make_pair<wstring, wstring>(L"cscᵣ⁻¹", L"{Locked}The string that represents the function")},
	{L"InverseCscGrad", make_pair<wstring, wstring>(L"csc₉⁻¹", L"{Locked}The string that represents the function")},
	{L"CotDeg", make_pair<wstring, wstring>(L"cot₀", L"{Locked}The string that represents the function")},
	{L"CotRad", make_pair<wstring, wstring>(L"cotᵣ", L"{Locked}The string that represents the function")},
	{L"CotGrad", make_pair<wstring, wstring>(L"cot₉", L"{Locked}The string that represents the function")},
	{L"InverseCotDeg", make_pair<wstring, wstring>(L"cot₀⁻¹", L"{Locked}The string that represents the function")},
	{L"InverseCotRad", make_pair<wstring, wstring>(L"cotᵣ⁻¹", L"{Locked}The string that represents the function")},
	{L"InverseCotGrad", make_pair<wstring, wstring>(L"cot₉⁻¹", L"{Locked}The string that represents the function")},
	{L"Sech", make_pair<wstring, wstring>(L"sech", L"{Locked}The string that represents the function")},
	{L"InverseSech", make_pair<wstring, wstring>(L"sech⁻¹", L"{Locked}The string that represents the function")},
	{L"Csch", make_pair<wstring, wstring>(L"csch", L"{Locked}The string that represents the function")},
	{L"InverseCsch", make_pair<wstring, wstring>(L"csch⁻¹", L"{Locked}The string that represents the function")},
	{L"Coth", make_pair<wstring, wstring>(L"coth", L"{Locked}The string that represents the function")},
	{L"InverseCoth", make_pair<wstring, wstring>(L"coth⁻¹", L"{Locked}The string that represents the function")},
	{L"TwoPowX", make_pair<wstring, wstring>(L"2^", L"{Locked}The string that represents the function")},
	{L"LogBaseY", make_pair<wstring, wstring>(L"log base", L"{Locked}The string that represents the function")},
	{L"Abs", make_pair<wstring, wstring>(L"abs", L"{Locked}The string that represents the function")},
	{L"Ceil", make_pair<wstring, wstring>(L"ceil", L"{Locked}The string that represents the function")},
	{L"Floor", make_pair<wstring, wstring>(L"floor", L"{Locked}The string that represents the function")},
	{L"Nand", make_pair<wstring, wstring>(L"NAND", L"{Locked}The string that represents the function")},
	{L"Nor", make_pair<wstring, wstring>(L"NOR", L"{Locked}The string that represents the function")},
	{L"CubeRoot", make_pair<wstring, wstring>(L"cuberoot", L"{Locked}The string that represents the function")},
	{L"ProgrammerMod", make_pair<wstring, wstring>(L"%", L"{Locked}The string that represents the function")}
};

wstring CalculationManager::GetResourceString(wstring input)
{
	auto found = rs_name_value_comment_map.find(input);
	if (found == rs_name_value_comment_map.end()) {
		return L"";
	}
	else {
		return found->second.first;
	}
}

wstring CalculationManager::GetCEngineString(wstring input)
{
	auto found = ce_name_value_comment_map.find(input);
	if (found == ce_name_value_comment_map.end()) {
		return L"";
	}
	else {
		return found->second.first;
	}
}

wstring GetString(wstring input)
{
	return CalculationManager::GetCEngineString(input);
}
